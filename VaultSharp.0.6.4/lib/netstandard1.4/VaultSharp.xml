<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VaultSharp</name>
    </assembly>
    <members>
        <member name="T:VaultSharp.IVaultClient">
            <summary>
            Provides an interface to interact with Vault as a client.
            This is the only entry point for consuming the Vault Client.
            </summary>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetInitializationStatusAsync">
            <summary>
            Gets the initialization status of Vault.
            This is an unauthenticated call and does not use the credentials.
            </summary>
            <returns>
            The initialization status of Vault.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.InitializeAsync(VaultSharp.Backends.System.Models.InitializeOptions)">
            <summary>
            Initializes a new Vault. The Vault must have not been previously initialized.
            This is an unauthenticated call and does not use the credentials.
            </summary>
            <param name="initializeOptions"><para>[required]</para>
            The initialization options.
            </param>
            <returns>
            An object including the (possibly encrypted, if pgp_keys was provided) master keys and initial root token.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetRootTokenGenerationStatusAsync">
            <summary>
            Gets the configuration and progress of the current root generation attempt.
            </summary>
            <returns>The root status</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.InitiateRootTokenGenerationAsync(System.String,System.String)">
            <summary>
            Initializes a new root generation attempt. 
            Only a single root generation attempt can take place at a time. 
            One (and only one) of <see cref="!:base64EncodedOneTimePassword"/> or <see cref="!:pgpKey"/> are required.
            </summary>
            <param name="base64EncodedOneTimePassword"><para>[optional]</para>
            A base64-encoded 16-byte value. The raw bytes of the token will be XOR'd with this 
            value before being returned to the final unseal key provider.</param>
            <param name="pgpKey"><para>[optional]</para>
            A base64-encoded PGP public key. The raw bytes of the token will be encrypted with this value before being 
            returned to the final unseal key provider.</param>
            <returns>The root token generation status.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CancelRootTokenGenerationAsync">
            <summary>
            Cancels any in-progress root generation attempt. 
            This clears any progress made. 
            This must be called to change the OTP or PGP key being used.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ContinueRootTokenGenerationAsync(System.String,System.String)">
            <summary>
            Continues the root generation process.
            Enter a single master key share to progress the root generation attempt. 
            If the threshold number of master key shares is reached, 
            Vault will complete the root generation and issue the new token. 
            Otherwise, this API must be called multiple times until that threshold is met. 
            The attempt nonce must be provided with each call.
            </summary>
            <param name="masterShareKey"><para>[required]</para>
            A single master share key.</param>
            <param name="nonce"><para>[required]</para>
            The nonce of the root generation attempt.</param>
            <returns>
            An object indicating the attempt nonce, and completion status, 
            and the encoded root token, if the attempt is complete.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.QuickRootTokenGenerationAsync(System.String[],System.String)">
            <summary>
            Generates a root token in a single call. 
            Call this after calling the <see cref="M:VaultSharp.IVaultClient.InitiateRootTokenGenerationAsync(System.String,System.String)"/> method.
            Provide all the master keys together.
            </summary>
            <param name="allMasterShareKeys">All the master share keys.</param>
            <param name="nonce"><para>[required]</para>
            The nonce of the root generation attempt.</param>
            <returns>The final Status after all the share keys are applied.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetSealStatusAsync">
            <summary>
            Gets the seal status of the Vault.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <returns>
            The seal status of the Vault.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SealAsync">
            <summary>
            Seals the Vault.
            In HA mode, only an active node can be sealed. Standby nodes should be restarted to get the same effect. 
            Requires a token with root policy.
            </summary>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.UnsealAsync(System.String,System.Boolean)">
            <summary>
            Progresses the unsealing of the Vault.
            Enter a single master key share to progress the unsealing of the Vault.
            If the threshold number of master key shares is reached, Vault will attempt to unseal the Vault.
            Otherwise, this API must be called multiple times until that threshold is met.
            <para>
            Either the <see cref="!:masterShareKey" /> or <see cref="!:resetCompletely" /> parameter must be provided; 
            if both are provided, <see cref="!:resetCompletely" /> takes precedence.
            </para>
            This is an unauthenticated call and does not use the credentials.
            </summary>
            <param name="masterShareKey">A single master share key.</param>
            <param name="resetCompletely">When <value>true</value>, the previously-provided unseal keys are discarded from memory and the unseal process is completely reset.
            Default value is <value>false</value>.
            If you make a call with the value as <value>true</value>, it doesn't matter if this call has a valid unused <see cref="!:masterShareKey" />. It'll be ignored.</param>
            <returns>
            The seal status of the Vault.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.QuickUnsealAsync(System.String[])">
            <summary>
            Unseals the Vault in a single call.
            Provide all the master keys together.
            </summary>
            <param name="allMasterShareKeys">All the master share keys.</param>
            <returns>The final Seal Status after all the share keys are applied.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetAllMountedSecretBackendsAsync">
            <summary>
            Gets all the mounted secret backends.
            </summary>
            <returns>
            The mounted secret backends.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MountSecretBackendAsync(VaultSharp.Backends.Secret.Models.SecretBackend)">
            <summary>
            Mounts the new secret backend to the mount point in the URL.
            </summary>
            <param name="secretBackend">The secret backend.</param>
            <returns>
            A task
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.QuickMountSecretBackendAsync(VaultSharp.Backends.Secret.Models.SecretBackendType)">
            <summary>
            Quick api to mount the secret backend with default settings.
            </summary>
            <param name="secretBackendType"><para>[required]</para>
            The backend type to mount.</param>
            <returns>
            A task
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.UnmountSecretBackendAsync(System.String)">
            <summary>
            Unmounts the mount point specified in the URL.
            </summary>
            <param name="mountPoint"><para>[required]</para>
            The mount point for the secret backend. (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            A task
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.QuickUnmountSecretBackendAsync(VaultSharp.Backends.Secret.Models.SecretBackendType)">
            <summary>
            Quick api to unmounts the secret backend from the default mount point.
            </summary>
            <param name="secretBackendType"><para>[required]</para>
            The backend type to unmount.</param>
            <returns>
            A task
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetMountedSecretBackendConfigurationAsync(System.String)">
            <summary>
            Gets the mounted secret backend's configuration values.
            Unlike the <see cref="M:VaultSharp.IVaultClient.GetAllMountedSecretBackendsAsync"/> method, 
            this will return the current time in seconds for each TTL, 
            which may be the system default or a mount-specific value.
            </summary>
            <param name="mountPoint"><para>[required]</para>
            The mount point for the secret backend. (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            The mounted secret backend's configuration values.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TuneSecretBackendConfigurationAsync(System.String,VaultSharp.Backends.System.Models.MountConfiguration)">
            <summary>
            Tunes the mount configuration parameters for the given <see cref="!:mountPoint" />.
            </summary>
            <param name="mountPoint"><para>[required]</para>
            The mount point for the secret backend. (with or without trailing slashes. it doesn't matter)</param>
            <param name="mountConfiguration"><para>[optional]</para>
            The mount configuration with the required setting values.
            Provide a value of <value>"0"</value> or <value>"system"</value> for the TTL settings 
            if you want to use the system defaults.</param>
            <returns>
            A task
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RemountSecretBackendAsync(System.String,System.String)">
            <summary>
            Remounts the secret backend from the previous mount point to the new mount point.
            </summary>
            <param name="previousMountPoint"><para>[required]</para>
            The previous mount point for the secret backend.</param>
            <param name="newMountPoint"><para>[required]</para>
            The new mount point for the secret backend.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetAllEnabledAuthenticationBackendsAsync">
            <summary>
            Gets all the enabled authentication backends.
            </summary>
            <returns>
            The enabled authentication backends.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.EnableAuthenticationBackendAsync(VaultSharp.Backends.Authentication.Models.AuthenticationBackend)">
            <summary>
            Enables a new authentication backend.
            The auth backend can be accessed and configured via the auth path specified in the URL. 
            </summary>
            <param name="authenticationBackend">The authentication backend.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.QuickEnableAuthenticationBackendAsync(VaultSharp.Backends.Authentication.Models.AuthenticationBackendType)">
            <summary>
            Quickly enables a new authentication backend at the default mountpoint.
            </summary>
            <param name="authenticationBackendType">The authentication backend type.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.DisableAuthenticationBackendAsync(System.String)">
            <summary>
            Disables the authentication backend at the given mount point.
            </summary>
            <param name="authenticationPath"><para>[required]</para>
            The authentication path for the authentication backend. (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetMountedAuthenticationBackendConfigurationAsync(System.String)">
            <summary>
            Gets the mounted authentication backend's configuration values.
            The lease values for each TTL may be the system default ("0" or "system") or a mount-specific value.
            </summary>
            <param name="authenticationPath"><para>[required]</para>
            The authentication path for the authentication backend. (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            The mounted secret backend's configuration values.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TuneAuthenticationBackendConfigurationAsync(System.String,VaultSharp.Backends.System.Models.MountConfiguration)">
            <summary>
            Tunes the mount configuration parameters for the given <see cref="!:authenticationPath" />.
            </summary>
            <param name="authenticationPath"><para>[required]</para>
            The authentication path for the authentication backend. (with or without trailing slashes. it doesn't matter)</param>
            <param name="mountConfiguration"><para>[required]</para>
            The mount configuration with the required setting values.
            Provide a value of <value>"0"</value> or <value>"system"</value> for the TTL settings if you want to use the system defaults.</param>
            <returns>
            A task
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetAllPoliciesAsync">
            <summary>
            Gets all the available policy names in the system.
            </summary>
            <returns>
            The policy names.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetPolicyAsync(System.String)">
            <summary>
            Gets the rules for the named policy.
            </summary>
            <param name="policyName">
            <para>[required]</para>
            The name of the policy.</param>
            <returns>
            The rules for the policy.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.WritePolicyAsync(VaultSharp.Backends.System.Models.Policy)">
            <summary>
            Adds or updates the policy.
            Once a policy is updated, it takes effect immediately to all associated users.
            </summary>
            <param name="policy"><para>[required]</para>
            The policy to be added or updated.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.DeletePolicyAsync(System.String)">
            <summary>
            Deletes the named policy. This will immediately affect all associated users.
            </summary>
            <param name="policyName"><para>[required]</para>
            The name of the policy.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetTokenCapabilitiesAsync(System.String,System.String)">
            <summary>
            Gets the capabilities of the token on the given path.
            </summary>
            <param name="token"><para>[required]</para>
            Token for which capabilities are being queried.</param>
            <param name="path"><para>[required]</para>
            Path on which the token's capabilities will be checked.</param>
            <returns>The list of capabilities.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetCallingTokenCapabilitiesAsync(System.String)">
            <summary>
            Gets the capabilities of client token on the given path. 
            Client token is the Vault token with which this API call is made.
            </summary>
            <param name="path"><para>[required]</para>
            Path on which the token's capabilities will be checked.</param>
            <returns>The list of capabilities.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetTokenAccessorCapabilitiesAsync(System.String,System.String)">
            <summary>
            Gets the capabilities of the token associated with an accessor, on the given path.
            </summary>
            <param name="tokenAccessor"><para>[required]</para>
            Token accessor for which capabilities are being queried.</param>
            <param name="path"><para>[required]</para>
            Path on which the token's capabilities will be checked.</param>
            <returns>The list of capabilities.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetAllEnabledAuditBackendsAsync">
            <summary>
            Gets all the enabled audit backends.
            </summary>
            <returns>
            The enabled audit backends.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.EnableAuditBackendAsync(VaultSharp.Backends.Audit.Models.AuditBackend)">
            <summary>
            Enables a new audit backend at the specified mount point.
            </summary>
            <param name="auditBackend">The audit backend.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.DisableAuditBackendAsync(System.String)">
            <summary>
            Disables the audit backend at the given mount point.
            </summary>
            <param name="mountPoint"><para>[required]</para>
            The mount point for the audit backend. (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.HashWithAuditBackendAsync(System.String,System.String)">
            <summary>
            Hash the given input data with the specified audit backend's hash function and salt.
            This endpoint can be used to discover whether a given plaintext string (the input parameter) appears in
            the audit log in obfuscated form.
            Note that the audit log records requests and responses; since the Vault API is JSON-based,
            any binary data returned from an API call (such as a DER-format certificate) is base64-encoded by
            the Vault server in the response, and as a result such information should also be base64-encoded
            to supply into the <see cref="!:inputToHash" /> parameter.
            </summary>
            <param name="mountPoint"><para>[required]</para>
            The mount point for the audit backend. (with or without trailing slashes. it doesn't matter)</param>
            <param name="inputToHash"><para>[required]</para>
            The input value to hash</param>
            <returns>
            The hashed value.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RenewSecretAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Renews the secret by requesting to extending the lease.
            </summary>
            <param name="leaseId"><para>[required]</para>
            The lease identifier for the secret.</param>
            <param name="incrementSeconds"><para>[optional]</para>
            A requested amount of time in seconds to extend the lease. This is advisory.</param>
            <returns>
            The secret with the lease information and the data as a dictionary.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RevokeSecretAsync(System.String)">
            <summary>
            Revokes the secret effective immediately.
            </summary>
            <param name="leaseId"><para>[required]</para>
            The lease identifier for the secret.</param>
            <returns>
            The task
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RevokeAllSecretsOrTokensUnderPrefixAsync(System.String)">
            <summary>
            Revokes all the secrets or tokens generated under the given prefix immediately.
            Access to it should be tightly controlled as it can be used to revoke very large numbers of secrets/tokens at once.
            </summary>
            <param name="pathPrefix"><para>[required]</para>
            The path prefix. (with or without trailing slashes. it doesn't matter)</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ForceRevokeAllSecretsOrTokensUnderPrefixAsync(System.String)">
            <summary>
            Revoke all secrets or tokens generated under a given prefix immediately. 
            Unlike <see cref="M:VaultSharp.IVaultClient.RevokeAllSecretsOrTokensUnderPrefixAsync(System.String)"/>, this path ignores backend errors 
            encountered during revocation. 
            This is potentially very dangerous and should only be used in specific emergency 
            situations where errors in the backend or the connected backend service 
            prevent normal revocation. 
            By ignoring these errors, Vault abdicates responsibility for ensuring that the issued 
            credentials or secrets are properly revoked and/or cleaned up. 
            Access to this endpoint should be tightly controlled.
            </summary>
            <param name="pathPrefix"><para>[required]</para>The path prefix.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.LookupTokenWrapInfoAsync(System.String)">
            <summary>
            Looks up wrapping properties for the given token.
            </summary>
            <param name="tokenId">
            <para>[required]</para>
            The wrapping token identifier.
            </param>
            <returns>The token wrap info.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RewrapWrappedResponseDataAsync(System.String)">
            <summary>
            Rewraps a response-wrapped token; the new token will use the same creation TTL as 
            the original token and contain the same response. 
            The old token will be invalidated. 
            This can be used for long-term storage of a secret in a response-wrapped 
            token when rotation is a requirement.
            </summary>
            <param name="tokenId">
            <para>[required]</para>
            The wrapping token identifier.
            </param>
            <returns>The secret with re-wrapped info.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.UnwrapWrappedResponseDataAsync(System.String)">
            <summary>
            Returns the original response inside the given wrapping token. 
            This endpoint provides additional validation checks on the token, 
            returns the original value on the wire and ensures that the response is properly audit-logged.
            </summary>
            <param name="tokenId">
            <para>[required]</para>
            The wrapping token identifier.
            </param>
            <returns>The unwrapped original data.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.UnwrapWrappedResponseDataAsync``1(System.String)">
            <summary>
            Returns the original response inside the given wrapping token. 
            This endpoint provides additional validation checks on the token, 
            returns the original value on the wire and ensures that the response is properly audit-logged.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
            <param name="tokenId">
            <para>[required]</para>
            The wrapping token identifier.
            </param>
            <returns>The unwrapped original data.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.WrapResponseDataAsync(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Wraps the given user-supplied data inside a response-wrapped token.
            </summary>
            <param name="data">
            <para>[required]</para>
            The user supplied data.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The wrapped response.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetLeaderAsync">
            <summary>
            Gets the high availability status and current leader instance of Vault.
            </summary>
            <returns>
            The leader info.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.StepDownActiveNodeAsync">
            <summary>
            Forces the node to give up active status. 
            If the node does not have active status, this endpoint does nothing. 
            Note that the node will sleep for ten seconds before attempting to grab the active lock again, 
            but if no standby nodes grab the active lock in the interim, 
            the same node may become the active node again. 
            This API is a root protected call.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetEncryptionKeyStatusAsync">
            <summary>
            Gets information about the current encryption key used by Vault
            </summary>
            <returns>
            The status of the encryption key.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetRekeyStatusAsync">
            <summary>
            Gets the configuration and progress of the current rekey attempt.
            Information about the new shares to generate and the threshold required for the new shares,
            the number of unseal keys provided for this rekey and the required number of unseal keys is returned.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <returns>
            The rekey status.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.InitiateRekeyAsync(System.Int32,System.Int32,System.String[],System.Boolean)">
            <summary>
            Initiates a new rekey attempt.
            Only a single rekey attempt can take place at a time, and changing the parameters of a rekey requires canceling and starting a new rekey.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <param name="secretShares"><para>[required]</para>
            The number of shares to split the master key into.</param>
            <param name="secretThreshold"><para>[required]</para>
            The number of shares required to reconstruct the master key.
            This must be less than or equal to <see cref="!:secretShares" />.</param>
            <param name="pgpKeys"><para>[optional]</para>
            An array of PGP public keys used to encrypt the output unseal keys.
            Ordering is preserved.
            The keys must be base64-encoded from their original binary representation.
            The size of this array must be the same as <see cref="!:secretShares" />.</param>
            <param name="backup"><para>[optional]</para>
            If using PGP-encrypted keys, whether Vault should also back them up to a well-known 
            location in physical storage. These can then be retrieved and removed 
            via the GetRekeyBackupAsync endpoint. Makes sense only when pgp keys are provided.
            Defaults to 'false', meaning no backup.
            </param>
            <returns>
            The rekey status.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CancelRekeyAsync">
            <summary>
            Cancels any in-progress rekey. This clears the rekey settings as well as any progress made.
            This must be called to change the parameters of the rekey.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetRekeyBackupKeysAsync">
            <summary>
            Gets the the backup copy of PGP-encrypted unseal keys. 
            The returned value is the nonce of the rekey operation and a map of PGP key 
            fingerprint to hex-encoded PGP-encrypted key.
            </summary>
            <returns>The rekey backup info.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.DeleteRekeyBackupKeysAsync">
            <summary>
            Deletes the backup copy of PGP-encrypted unseal keys.
            </summary>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ContinueRekeyAsync(System.String,System.String)">
            <summary>
            Continues the rekey process. Enter a single master key share to progress the rekey of the Vault.
            If the threshold number of master key shares is reached, Vault will complete the rekey.
            Otherwise, this API must be called multiple times until that threshold is met.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <param name="masterShareKey"><para>[required]</para>
            A single master share key.</param>
            <param name="rekeyNonce"><para>[required]</para>
            The nonce of the rekey operation.</param>
            <returns>
            An object indicating the rekey operation nonce and completion status; 
            if completed, the new master keys are returned. 
            If the keys are PGP-encrypted, an array of key fingerprints will also be provided 
            (with the order in which the keys were used for encryption) along with whether 
            or not the keys were backed up to physical storage.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.QuickRekeyAsync(System.String[],System.String)">
            <summary>
            Rekeys the Vault in a single call.
            Call this after calling the <see cref="M:VaultSharp.IVaultClient.InitiateRekeyAsync(System.Int32,System.Int32,System.String[],System.Boolean)"/> method.
            Provide all the master keys together.
            This is an unauthenticated call and does not need credentials.
            </summary>
            <param name="allMasterShareKeys">All the master share keys.</param>
            <param name="rekeyNonce"><para>[required]</para>
            The nonce of the rekey operation.</param>
            <returns>The final Rekey progress after all the share keys are applied.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RotateEncryptionKeyAsync">
            <summary>
            Trigger a rotation of the backend encryption key. 
            This is the key that is used to encrypt data written to the storage backend, and is not provided to operators.
            This operation is done online. 
            Future values are encrypted with the new key, while old values are decrypted with previous encryption keys.
            </summary>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ReadRawSecretAsync(System.String)">
            <summary>
            Reads the value of the key at the given path.
            This is the raw path in the sorage backend and not the logical path that is exposed via the mount system.
            </summary>
            <param name="storagePath"><para>[required]</para>
            Raw path in the storage backend and not the logical path that is exposed via the mount system.</param>
            <returns>
            The Secret with raw data.
            </returns>
            t
        </member>
        <member name="M:VaultSharp.IVaultClient.WriteRawSecretAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Update the value of the key at the given path.
            This is the raw path in the storage backend and not the logical path that is exposed via the mount system.
            </summary>
            <param name="storagePath"><para>[required]</para>
            Raw path in the storage backend and not the logical path that is exposed via the mount system.</param>
            <param name="values"><para>[required]</para>
            The values to write. The dictionary will be JSONized as a raw value string before being written.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.DeleteRawSecretAsync(System.String)">
            <summary>
            Delete the key with given path.
            This is the raw path in the storage backend and not the logical path that is exposed via the mount system.
            </summary>
            <param name="storagePath"><para>[required]</para>
            Raw path in the storage backend and not the logical path that is exposed via the mount system.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetHealthStatusAsync(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Net.Http.HttpMethod)">
            <summary>
            Gets the health status of Vault. This provides a simple way to monitor the health of a Vault instance.
            This is an unauthenticated call and does not use the credentials.
            </summary>
            <param name="standbyOk"><para>[optional]</para>
            A flag to indicate that being a standby should still return the active status code 
            instead of the standby status code of HTTP 429 (or whatever is provided as standbyStatusCode)
            DEFAULTs to <value>null</value>, meaning a standby code will be returned.
            </param>
            <param name="activeStatusCode"><para>[optional]</para>
            A user defined status code provided to indicate the status code that should be returned 
            for an active node instead of the default successful response of HTTP 200.
            DEFAULTs to <value>null</value>, meaning the default HTTP 200 Status code will be returned.
            </param>
            <param name="standbyStatusCode"><para>[optional]</para>
            A user defined status code provided to indicate the status code that should be returned 
            for an standby node instead of the default error response of HTTP 429.
            DEFAULTs to <value>null</value>, meaning the default HTTP 429 Status code will be returned.
            </param>
            <param name="sealedStatusCode"><para>[optional]</para>
            A user defined status code provided to indicate the status code that should be returned 
            for an sealed node instead of the default error response of HTTP 503.
            DEFAULTs to <value>null</value>, meaning the default HTTP 503 Status code will be returned.
            </param>
            <param name="uninitializedStatusCode"><para>[optional]</para>
            A user defined status code provided to indicate the status code that should be returned 
            for an uninitialized vault node instead of the default error response of HTTP 501.
            DEFAULTs to <value>null</value>, meaning the default HTTP 501 Status code will be returned.
            </param>
            <param name="queryHttpMethod"><para>[optional]</para>
            The <see cref="T:System.Net.Http.HttpMethod"/> to be used to query vault. By default <see cref="P:System.Net.Http.HttpMethod.Get"/> will be used.
            You can change it to <see cref="P:System.Net.Http.HttpMethod.Head"/>.
            </param>
            <returns>
            The health status.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AWSConfigureRootCredentialsAsync(VaultSharp.Backends.Secret.Models.AWS.AWSRootCredentials,System.String)">
            <summary>
            Configures the root IAM credentials used. 
            If static credentials are not provided using this endpoint, then the credentials will be retrieved 
            from the environment variables AWS_ACCESS_KEY, AWS_SECRET_KEY and AWS_REGION respectively. 
            If the credentials are still not found and if the backend is configured on 
            an EC2 instance with metadata querying capabilities, 
            the credentials are fetched automatically.
            This API is a root protected call.
            </summary>
            <param name="awsRootCredentials"><para>[optional]</para>
            The root credentials need permission to perform various IAM actions.
            These are the actions that the AWS secret backend uses to manage IAM credentials.
            Provide null, if you want to use the environment variables of Vault Server or fetch from metadata of EC2 instance. 
            </param>
            <param name="awsBackendMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AWSConfigureCredentialLeaseSettingsAsync(VaultSharp.Backends.Secret.Models.CredentialLeaseSettings,System.String)">
            <summary>
            Configures the lease settings for generated credentials.
            This API is a root protected call.
            </summary>
            <param name="credentialLeaseSettings"><para>[required]</para>
            The credential lease settings.</param>
            <param name="awsBackendMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AWSWriteNamedRoleAsync(System.String,VaultSharp.Backends.Secret.Models.AWS.AWSRoleDefinition,System.String)">
            <summary>
            Creates or updates a named AWS role.
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="awsRoleDefinition"><para>[required]</para>
            The AWS role definition with IAM policy or full ARN. Provide one of the two.</param>
            <param name="awsBackendMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AWSReadNamedRoleAsync(System.String,System.String,System.String)">
            <summary>
            Queries a named AWS role definition to get the IAM policy.
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="awsBackendMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the AWS Role definition as an IAM policy in a string JSON format.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AWSDeleteNamedRoleAsync(System.String,System.String)">
            <summary>
            Deletes a named AWS role.
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="awsBackendMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AWSGetRoleListAsync(System.String,System.String)">
            <summary>
            Get the list of existing roles in the backend.
            </summary>
            <param name="awsBackendMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The role list.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AWSGenerateDynamicCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic IAM AWS credential based on the named role.
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="awsBackendMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.Backends.Secret.Models.AWS.AWSCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AWSGenerateDynamicCredentialsWithSecurityTokenAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Generates a dynamic IAM AWS credential  with an STS token based on the named role.
            The TTL will be 3600 seconds (one hour).
            </summary>
            <param name="awsRoleName"><para>[required]</para>
            Name of the AWS role.</param>
            <param name="timeToLive"><para>[optional]</para>
            Time to live. Defaults to 1 hour</param>
            <param name="awsBackendMountPoint"><para>[optional]</para>
            The mount point for the AWS backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.AWS" />
            Provide a value only if you have customized the AWS mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.Backends.Secret.Models.AWS.AWSCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CassandraConfigureConnectionAsync(VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo,System.String)">
            <summary>
            Configures the connection information used to communicate with Cassandra.
            </summary>
            <param name="cassandraConnectionInfo"><para>[required]</para>
            The cassandra connection information.</param>
            <param name="cassandraBackendMountPoint"><para>[optional]</para>
            The mount point for the Cassandra backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Cassandra" />
            Provide a value only if you have customized the Cassandra mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CassandraWriteNamedRoleAsync(System.String,VaultSharp.Backends.Secret.Models.Cassandra.CassandraRoleDefinition,System.String)">
            <summary>
            Creates or updates a named Cassandra role.
            </summary>
            <param name="cassandraRoleName"><para>[required]</para>
            Name of the Cassandra role.</param>
            <param name="cassandraRoleDefinition"><para>[required]</para>
            The Cassandra role definition with the creation, rollback query and lease information.</param>
            <param name="cassandraBackendMountPoint"><para>[optional]</para>
            The mount point for the Cassandra backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Cassandra" />
            Provide a value only if you have customized the Cassandra mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CassandraReadNamedRoleAsync(System.String,System.String,System.String)">
            <summary>
            Queries a named Cassandra role definition
            </summary>
            <param name="cassandraRoleName"><para>[required]</para>
            Name of the Cassandra role.</param>
            <param name="cassandraBackendMountPoint"><para>[optional]</para>
            The mount point for the Cassandra backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Cassandra" />
            Provide a value only if you have customized the Cassandra mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the Cassandra role definition with the creation, rollback query and lease information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CassandraDeleteNamedRoleAsync(System.String,System.String)">
            <summary>
            Deletes a named Cassandra role definition
            </summary>
            <param name="cassandraRoleName"><para>[required]</para>
            Name of the Cassandra role.</param>
            <param name="cassandraBackendMountPoint"><para>[optional]</para>
            The mount point for the Cassandra backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Cassandra" />
            Provide a value only if you have customized the Cassandra mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CassandraGenerateDynamicCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of dynamic credentials based on the named role.
            </summary>
            <param name="cassandraRoleName"><para>[required]</para>
            Name of the Cassandra role.</param>
            <param name="cassandraBackendMountPoint"><para>[optional]</para>
            The mount point for the Cassandra backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Cassandra" />
            Provide a value only if you have customized the Cassandra mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.Backends.Secret.Models.UsernamePasswordCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ConsulConfigureAccessAsync(VaultSharp.Backends.Secret.Models.Consul.ConsulAccessInfo,System.String)">
            <summary>
            Configures the access information for Consul.
            This API is a root protected call.
            </summary>
            <param name="consulAccessInfo"><para>[required]</para>
            The consul access information.</param>
            <param name="consulBackendMountPoint"><para>[optional]</para>
            The mount point for the Consul backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Consul" />
            Provide a value only if you have customized the Consul mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ConsulWriteNamedRoleAsync(System.String,VaultSharp.Backends.Secret.Models.Consul.ConsulRoleDefinition,System.String)">
            <summary>
            Creates or updates a named Consul role.
            </summary>
            <param name="consulRoleName"><para>[required]</para>
            Name of the Consul role.</param>
            <param name="consulRoleDefinition"><para>[required]</para>
            The Consul role definition with the policy and token information.</param>
            <param name="consulBackendMountPoint"><para>[optional]</para>
            The mount point for the Consul backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Consul" />
            Provide a value only if you have customized the Consul mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ConsulReadNamedRoleAsync(System.String,System.String,System.String)">
            <summary>
            Queries a named Consul role.
            </summary>
            <param name="consulRoleName"><para>[required]</para>
            Name of the Consul role.</param>
            <param name="consulBackendMountPoint"><para>[optional]</para>
            The mount point for the Consul backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Consul" />
            Provide a value only if you have customized the Consul mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the Consul role definition.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ConsulReadRoleListAsync(System.String,System.String)">
            <summary>
            Returns a list of available roles. Only the role names are returned, not any values.
            </summary>
            <param name="consulBackendMountPoint"><para>[optional]</para>
            The mount point for the Consul backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Consul" />
            Provide a value only if you have customized the Consul mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            A list of available roles. Only the role names are returned, not any values.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ConsulDeleteNamedRoleAsync(System.String,System.String)">
            <summary>
            Deletes a Consul role definition.
            </summary>
            <param name="consulRoleName"><para>[required]</para>
            Name of the Consul role.</param>
            <param name="consulBackendMountPoint"><para>[optional]</para>
            The mount point for the Consul backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Consul" />
            Provide a value only if you have customized the Consul mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ConsulGenerateDynamicCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a dynamic Consul token based on the role definition.
            </summary>
            <param name="consulRoleName"><para>[required]</para>
            Name of the Consul role.</param>
            <param name="consulBackendMountPoint"><para>[optional]</para>
            The mount point for the Consul backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Consul" />
            Provide a value only if you have customized the Consul mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.Backends.Secret.Models.Consul.ConsulCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CubbyholeReadSecretAsync(System.String,System.String)">
            <summary>
            Retrieves the secret at the specified location.
            </summary>
            <param name="locationPath"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CubbyholeReadSecretLocationPathListAsync(System.String,System.String)">
            <summary>
            Retrieves the secret location path entries at the specified location.
            Folders are suffixed with /. The input must be a folder; list on a file will not return a value. 
            The values themselves are not accessible via this API.
            </summary>
            <param name="locationPath"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret list with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CubbyholeWriteSecretAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Stores a secret at the specified location.
            </summary>
            <param name="locationPath"><para>[required]</para>
            The location path where the secret needs to be stored.</param>
            <param name="values"><para>[required]</para>
            The values to be written. The values will be overwritten.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CubbyholeDeleteSecretAsync(System.String)">
            <summary>
            Deletes the secret at the specified location.
            </summary>
            <param name="locationPath"><para>[required]</para>
            The location path where the secret needs to be deleted from.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GenericReadSecretAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret at the specified location.
            </summary>
            <param name="locationPath"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="genericBackendMountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Generic" />
            Provide a value only if you have customized the Generic mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GenericReadSecretLocationPathListAsync(System.String,System.String,System.String)">
            <summary>
            Retrieves the secret location path entries at the specified location.
            Folders are suffixed with /. The input must be a folder; list on a file will not return a value. 
            The values themselves are not accessible via this API.
            </summary>
            <param name="locationPath"><para>[required]</para>
            The location path where the secret needs to be read from.</param>
            <param name="genericBackendMountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Generic" />
            Provide a value only if you have customized the Generic mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret list with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GenericWriteSecretAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Stores a secret at the specified location.
            If the value does not yet exist, the calling token must have an ACL policy granting the create capability. 
            If the value already exists, the calling token must have an ACL policy granting the update capability.
            </summary>
            <param name="locationPath"><para>[required]</para>
            The location path where the secret needs to be stored.</param>
            <param name="values"><para>[required]</para>
            The values to be written. The values will be overwritten.</param>
            <param name="genericBackendMountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Generic" />
            Provide a value only if you have customized the Generic mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GenericDeleteSecretAsync(System.String,System.String)">
            <summary>
            Deletes the secret at the specified location.
            </summary>
            <param name="locationPath"><para>[required]</para>
            The location path where the secret needs to be deleted from.</param>
            <param name="genericBackendMountPoint"><para>[optional]</para>
            The mount point for the Generic backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Generic" />
            Provide a value only if you have customized the Generic mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MongoDbConfigureConnectionAsync(VaultSharp.Backends.Secret.Models.MongoDb.MongoDbConnectionInfo,System.String,System.String)">
            <summary>
            Configures the connection information used to communicate with MongoDb Server.
            This API is a root protected call.
            </summary>
            <param name="mongoDbConnectionInfo"><para>[required]</para>
            The MongoDb connection information.</param>
            <param name="mongoDbBackendMountPoint"><para>[optional]</para>
            The mount point for the MongoDb backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDb" />
            Provide a value only if you have customized the MongoDb mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MongoDbReadConnectionInfoAsync(System.String,System.String)">
            <summary>
            Queries the connection configuration. Access to this endpoint should be controlled via ACLs as it will 
            return the connection URI as it is, including passwords, if any.
            </summary>
            <param name="mongoDbBackendMountPoint"><para>[optional]</para>
            The mount point for the MongoDb backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDb" />
            Provide a value only if you have customized the MongoDb mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The MongoDb connection information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MongoDbConfigureCredentialLeaseSettingsAsync(VaultSharp.Backends.Secret.Models.CredentialTimeToLiveSettings,System.String)">
            <summary>
            Configures the lease settings for generated credentials.
            </summary>
            <param name="credentialTimeToLiveSettings"><para>[required]</para>
            The credential lease settings.</param>
            <param name="mongoDbBackendMountPoint"><para>[optional]</para>
            The mount point for the MongoDb backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDb" />
            Provide a value only if you have customized the MongoDb mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MongoDbReadCredentialLeaseSettingsAsync(System.String,System.String)">
            <summary>
            Queries the lease configuration.
            </summary>
            <param name="mongoDbBackendMountPoint"><para>[optional]</para>
            The mount point for the MongoDb backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDb" />
            Provide a value only if you have customized the MongoDb mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The MongoDb lease settings.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MongoDbWriteNamedRoleAsync(System.String,VaultSharp.Backends.Secret.Models.MongoDb.MongoDbRoleDefinition,System.String)">
            <summary>
            Creates or updates a named MongoDb role.
            </summary>
            <param name="mongoDbRoleName"><para>[required]</para>
            Name of the MongoDb role.</param>
            <param name="mongoDbRoleDefinition"><para>[required]</para>
            The MongoDb role definition with the creation, rollback query and lease information.</param>
            <param name="mongoDbBackendMountPoint"><para>[optional]</para>
            The mount point for the MongoDb backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDb" />
            Provide a value only if you have customized the MongoDb mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MongoDbReadNamedRoleAsync(System.String,System.String,System.String)">
            <summary>
            Queries a named MongoDb role definition
            </summary>
            <param name="mongoDbRoleName"><para>[required]</para>
            Name of the MongoDb role.</param>
            <param name="mongoDbBackendMountPoint"><para>[optional]</para>
            The mount point for the MongoDb backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDb" />
            Provide a value only if you have customized the MongoDb mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the MongoDb role definition with the creation, rollback query and lease information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MongoDbReadRoleListAsync(System.String,System.String)">
            <summary>
            Returns a list of available roles. Only the role names are returned, not any values.
            </summary>
            <param name="mongoDbBackendMountPoint"><para>[optional]</para>
            The mount point for the MongoDb backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDb" />
            Provide a value only if you have customized the MongoDb mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            A list of available roles. Only the role names are returned, not any values.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MongoDbDeleteNamedRoleAsync(System.String,System.String)">
            <summary>
            Deletes a named MongoDb role definition
            </summary>
            <param name="mongoDbRoleName"><para>[required]</para>
            Name of the MongoDb role.</param>
            <param name="mongoDbBackendMountPoint"><para>[optional]</para>
            The mount point for the MongoDb backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDb" />
            Provide a value only if you have customized the MongoDb mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MongoDbGenerateDynamicCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of dynamic credentials based on the named role.
            </summary>
            <param name="mongoDbRoleName"><para>[required]</para>
            Name of the MongoDb role.</param>
            <param name="mongoDbBackendMountPoint"><para>[optional]</para>
            The mount point for the MongoDb backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDb" />
            Provide a value only if you have customized the MongoDb mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbUsernamePasswordCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MicrosoftSqlConfigureConnectionAsync(VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlConnectionInfo,System.String)">
            <summary>
            Configures the connection information used to communicate with Microsoft Sql Server.
            This API is a root protected call.
            </summary>
            <param name="microsoftSqlConnectionInfo"><para>[required]</para>
            The Microsoft Sql connection information.</param>
            <param name="microsoftSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the Microsoft Sql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MicrosoftSql" />
            Provide a value only if you have customized the Microsoft Sql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MicrosoftSqlConfigureCredentialLeaseSettingsAsync(VaultSharp.Backends.Secret.Models.CredentialTimeToLiveSettings,System.String)">
            <summary>
            Configures the lease settings for generated credentials.
            </summary>
            <param name="credentialTimeToLiveSettings"><para>[required]</para>
            The credential lease settings.</param>
            <param name="microsoftSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MicrosoftSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MicrosoftSql" />
            Provide a value only if you have customized the MicrosoftSql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MicrosoftSqlReadCredentialLeaseSettingsAsync(System.String,System.String)">
            <summary>
            Queries the Microsoft SQL credential lease settings.
            </summary>
            <param name="microsoftSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MicrosoftSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MicrosoftSql" />
            Provide a value only if you have customized the MicrosoftSql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The lease settings.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MicrosoftSqlWriteNamedRoleAsync(System.String,VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlRoleDefinition,System.String)">
            <summary>
            Creates or updates a named MicrosoftSql role definition.
            </summary>
            <param name="microsoftSqlRoleName"><para>[required]</para>
            Name of the MicrosoftSql role.</param>
            <param name="microsoftSqlRoleDefinition"><para>[required]</para>
            The MicrosoftSql role definition with the creation, rollback query and lease information.</param>
            <param name="microsoftSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MicrosoftSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MicrosoftSql" />
            Provide a value only if you have customized the MicrosoftSql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MicrosoftSqlReadNamedRoleAsync(System.String,System.String,System.String)">
            <summary>
            Queries a named MicrosoftSql role definition
            </summary>
            <param name="microsoftSqlRoleName"><para>[required]</para>
            Name of the MicrosoftSql role.</param>
            <param name="microsoftSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MicrosoftSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MicrosoftSql" />
            Provide a value only if you have customized the MicrosoftSql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the MicrosoftSql role definition with the creation, rollback query and lease information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MicrosoftSqlReadRoleListAsync(System.String,System.String)">
            <summary>
            Returns a list of available roles. Only the role names are returned, not any values.
            </summary>
            <param name="microsoftSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MicrosoftSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MicrosoftSql" />
            Provide a value only if you have customized the MicrosoftSql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            A list of available roles. Only the role names are returned, not any values.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MicrosoftSqlDeleteNamedRoleAsync(System.String,System.String)">
            <summary>
            Deletes a named MicrosoftSql role definition
            </summary>
            <param name="microsoftSqlRoleName"><para>[required]</para>
            Name of the MicrosoftSql role.</param>
            <param name="microsoftSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MicrosoftSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MicrosoftSql" />
            Provide a value only if you have customized the MicrosoftSql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MicrosoftSqlGenerateDynamicCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of dynamic credentials based on the named role.
            </summary>
            <param name="microsoftSqlRoleName"><para>[required]</para>
            Name of the MicrosoftSql role.</param>
            <param name="microsoftSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MicrosoftSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MicrosoftSql" />
            Provide a value only if you have customized the MicrosoftSql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.Backends.Secret.Models.UsernamePasswordCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MySqlConfigureConnectionAsync(VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo,System.String)">
            <summary>
            Configures the connection information used to communicate with MySql.
            This API is a root protected call.
            </summary>
            <param name="mySqlConnectionInfo"><para>[required]</para>
            The MySql connection information.</param>
            <param name="mySqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MySql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MySql" />
            Provide a value only if you have customized the MySql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MySqlReadConnectionInfoAsync(System.String,System.String)">
            <summary>
            Reads the connection information used to communicate with MySql.
            </summary>
            <param name="mySqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MySql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MySql" />
            Provide a value only if you have customized the MySql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The connection information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MySqlConfigureCredentialLeaseSettingsAsync(VaultSharp.Backends.Secret.Models.CredentialLeaseSettings,System.String)">
            <summary>
            Configures the lease settings for generated credentials.
            If not configured, leases default to 1 hour.
            This API is a root protected call.
            </summary>
            <param name="credentialLeaseSettings"><para>[required]</para>
            The credential lease settings.</param>
            <param name="mySqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MySql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MySql" />
            Provide a value only if you have customized the MySql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MySqlReadCredentialLeaseSettingsAsync(System.String,System.String)">
            <summary>
            Queries the MySql credential lease settings.
            </summary>
            <param name="mySqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MySql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MySql" />
            Provide a value only if you have customized the MySql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The lease settings.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MySqlWriteNamedRoleAsync(System.String,VaultSharp.Backends.Secret.Models.MySql.MySqlRoleDefinition,System.String)">
            <summary>
            Creates or updates a named MySql role.
            </summary>
            <param name="mySqlRoleName"><para>[required]</para>
            Name of the MySql role.</param>
            <param name="mySqlRoleDefinition"><para>[required]</para>
            The MySql role definition with the creation, rollback query and lease information.</param>
            <param name="mySqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MySql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MySql" />
            Provide a value only if you have customized the MySql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MySqlReadNamedRoleAsync(System.String,System.String,System.String)">
            <summary>
            Queries a named MySql role definition
            </summary>
            <param name="mySqlRoleName"><para>[required]</para>
            Name of the MySql role.</param>
            <param name="mySqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MySql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MySql" />
            Provide a value only if you have customized the MySql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the MySql role definition with the creation, rollback query and lease information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MySqlReadRoleListAsync(System.String,System.String)">
            <summary>
            Returns a list of available roles. Only the role names are returned, not any values.
            </summary>
            <param name="mySqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MySql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MySql" />
            Provide a value only if you have customized the MySql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            A list of available roles. Only the role names are returned, not any values.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MySqlDeleteNamedRoleAsync(System.String,System.String)">
            <summary>
            Deletes a named MySql role definition
            </summary>
            <param name="mySqlRoleName"><para>[required]</para>
            Name of the MySql role.</param>
            <param name="mySqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MySql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MySql" />
            Provide a value only if you have customized the MySql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.MySqlGenerateDynamicCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of dynamic credentials based on the named role.
            </summary>
            <param name="mySqlRoleName"><para>[required]</para>
            Name of the MySql role.</param>
            <param name="mySqlBackendMountPoint"><para>[optional]</para>
            The mount point for the MySql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MySql" />
            Provide a value only if you have customized the MySql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.Backends.Secret.Models.UsernamePasswordCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIReadCACertificateAsync(VaultSharp.Backends.Secret.Models.PKI.CertificateFormat,System.String)">
            <summary>
            Retrieves the CA certificate in raw DER-encoded form. 
            This is a bare endpoint that does not return a standard Vault data structure. 
            The CA certificate can be returned in DER or PEM format. 
            </summary>
            <param name="certificateFormat"><para>[optional]</para>
            The certificate format needed.
            Defaults to <see cref="F:VaultSharp.Backends.Secret.Models.PKI.CertificateFormat.der" /></param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The raw certificate data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIReadCertificateAsync(System.String,System.String)">
            <summary>
            Retrieves one of a selection of certificates.
            This is an unauthenticated call and does not use the credentials.
            </summary>
            <param name="predicate"><para>[required]</para>
            The predicate to select a certificate.
            Valid values: ca for the CA certificate, crl for the current CRL, or a serial number in either hyphen-separated or colon-separated octal format.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the raw certificate data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIReadCertificateListAsync(System.String)">
            <summary>
            Returns a list of the current certificates by serial number only.
            </summary>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>The list of the current certificates by serial number only.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIConfigureCACertificateAsync(System.String,System.String)">
            <summary>
            Allows submitting the CA information for the backend via a PEM file containing the CA certificate and its private key, concatenated.
            Not needed if you are generating a self-signed root certificate, and not used if you have a signed intermediate CA certificate with a generated key.
            If you have already set a certificate and key, they will be overridden.
            </summary>
            <param name="pemBundle"><para>[required]</para>
            The private key and CA certificate contents concatenated in PEM format with newlines replaced with \n.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIReadCRLExpirationAsync(System.String)">
            <summary>
            Allows getting the duration for which the generated CRL should be marked valid.
            </summary>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the expiry data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIWriteCRLExpirationAsync(System.String,System.String)">
            <summary>
            Allows setting the duration for which the generated CRL should be marked valid.
            </summary>
            <param name="expiry"><para>[required]</para>
            The time until expiration. Defaults to 72h.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIReadCertificateEndpointsAsync(System.String)">
            <summary>
            Fetch the URLs to be encoded in generated certificates.
            </summary>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the URLs.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIWriteCertificateEndpointsAsync(VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointOptions,System.String)">
            <summary>
            Allows setting the issuing certificate endpoints, CRL distribution points, and OCSP server endpoints that will be encoded into issued certificates.
            You can update any of the values at any time without affecting the other existing values.
            </summary>
            <param name="certificateEndpointOptions"><para>[required]</para>
            The certificate URLs to be encoded in generated certificates.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIReadCRLCertificateAsync(VaultSharp.Backends.Secret.Models.PKI.CertificateFormat,System.String)">
            <summary>
            Retrieves the current CRL in the raw requested format.
            This endpoint is suitable for usage in the CRL Distribution Points extension in a CA certificate.
            This is an unauthenticated call and does not use the credentials.
            </summary>
            <param name="certificateFormat"><para>[optional]</para>
            The certificate format needed.
            Defaults to <see cref="F:VaultSharp.Backends.Secret.Models.PKI.CertificateFormat.der" /></param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The raw certificate data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIRotateCRLAsync(System.String)">
            <summary>
            Forces a rotation of the CRL.
            This can be used by administrators to cut the size of the CRL if it contains a number of certificates that have now expired,
            but has not been rotated due to no further certificates being revoked.
            </summary>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            A status indicating if the rotation succeeded.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIGenerateIntermediateCACertificateSigningRequestAsync(VaultSharp.Backends.Secret.Models.PKI.CertificateSigningRequestOptions,System.String)">
            <summary>
            Generates a new private key and a CSR for signing.
            If using Vault as a root, and for many other CAs, the various parameters on the final certificate are set at signing time and may or may not honor the parameters set here.
            This will overwrite any previously existing CA private key.
            If the 'ExportprivateKey' option is requested, the private key will be returned in the response;
            else the private key will not be returned and cannot be retrieved later.
            This is mostly meant as a helper function, and not all possible parameters that can be set in a CSR are supported.
            </summary>
            <param name="certificateSigningRequestOptions"><para>[required]</para>
            The certificate signing request options.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the raw CSR object.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKISetSignedIntermediateCACertificateAsync(System.String,System.String)">
            <summary>
            Allows submitting the signed CA certificate corresponding to a private key generated via <see cref="M:VaultSharp.IVaultClient.PKIGenerateIntermediateCACertificateSigningRequestAsync(VaultSharp.Backends.Secret.Models.PKI.CertificateSigningRequestOptions,System.String)" />.
            The certificate should be submitted in PEM format
            </summary>
            <param name="certificateInPemFormat"><para>[required]</para>
            The certificate in pem format.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIGenerateDynamicCredentialsAsync(System.String,VaultSharp.Backends.Secret.Models.PKI.CertificateCredentialsRequestOptions,System.String)">
            <summary>
            Generates a new set of credentials (private key and certificate) based on the role named in the endpoint.
            The issuing CA certificate is returned as well, so that only the root CA need be in a client's trust store.
            The private key is not stored.
            If you do not save the private key, you will need to request a new certificate.
            </summary>
            <param name="pkiRoleName"><para>[required]</para>
            Name of the PKI role.</param>
            <param name="certificateCredentialRequestOptions"><para>[required]</para>
            The certificate credential request options.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the new Certificate credentials.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIRevokeCertificateAsync(System.String,System.String)">
            <summary>
            Revokes a certificate using its serial number.
            This is an alternative option to the standard method of revoking using Vault lease IDs.
            A successful revocation will rotate the CRL.
            </summary>
            <param name="serialNumber">The serial number of the certificate to revoke, in hyphen-separated or colon-separated octal.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the revocation data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIWriteNamedRoleAsync(System.String,VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition,System.String)">
            <summary>
            Creates or updates the role definition.
            If a client requests a certificate that is not allowed by the CN policy in the role, the request is denied.
            </summary>
            <param name="pkiRoleName"><para>[required]</para>
            Name of the PKI role.</param>
            <param name="certificateRoleDefinition"><para>[optional]</para>
            The certificate role definition.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIReadNamedRoleAsync(System.String,System.String)">
            <summary>
            Queries the named PKI role definition.
            </summary>
            <param name="pkiRoleName"><para>[required]</para>
            Name of the PKI role.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the certificate role definition.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIReadRoleListAsync(System.String)">
            <summary>
            Queries the list of available roles. Only the role names are returned, not any values.
            </summary>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the role names.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIDeleteNamedRoleAsync(System.String,System.String)">
            <summary>
            Deletes the named PKI role definition.
            </summary>
            <param name="pkiRoleName"><para>[required]</para>
            Name of the PKI role.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKIGenerateRootCACertificateAsync(VaultSharp.Backends.Secret.Models.PKI.RootCertificateRequestOptions,System.String)">
            <summary>
            Generates a new self-signed CA certificate and private key.
            This will overwrite any previously-existing private key and certificate.
            If the private key needs to be exported, the private key will be returned in the response;
            if not the private key will not be returned and cannot be retrieved later.
            Distribution points use the values set via <see cref="M:VaultSharp.IVaultClient.PKIWriteCertificateEndpointsAsync(VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointOptions,System.String)" />
            As with other issued certificates, Vault will automatically revoke the generated root at the end of its lease period;
            the CA certificate will sign its own CRL.
            </summary>
            <param name="rootCertificateRequestOptions"><para>[required]</para>
            The root certificate request options.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the root certificate data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKISignIntermediateCACertificateAsync(VaultSharp.Backends.Secret.Models.PKI.IntermediateCertificateRequestOptions,System.String)">
            <summary>
            Uses the configured CA certificate to issue a certificate with appropriate values for acting as an intermediate CA.
            Distribution points use the values set via <see cref="M:VaultSharp.IVaultClient.PKIWriteCertificateEndpointsAsync(VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointOptions,System.String)" />.
            Values set in the CSR are ignored unless CSR values flag is set to true, in which case the values from the CSR are used verbatim.
            </summary>
            <param name="intermediateCertificateRequestOptions"><para>[required]</para>
            The intermediate certificate request options.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the intermediate certificate data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKISignCertificateAsync(System.String,VaultSharp.Backends.Secret.Models.PKI.NewCertificateSigningRequestOptions,System.String)">
            <summary>
            Signs a new certificate based upon the provided CSR and the supplied parameters, subject to the restrictions contained in the role named in the endpoint.
            The issuing CA certificate is returned as well, so that only the root CA need be in a client's trust store.
            </summary>
            <param name="pkiRoleName"><para>[required]</para>
            Name of the PKI role.</param>
            <param name="newCertificateSigningRequestOptions"><para>[required]</para>
            The new certificate request options.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the intermediate certificate data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKISignCertificateVerbatimAsync(VaultSharp.Backends.Secret.Models.PKI.VerbatimCertificateSigningRequestOptions,System.String)">
            <summary>
            Signs a new certificate based upon the provided CSR.
            Values are taken verbatim from the CSR; the only restriction is that this endpoint will refuse to issue an intermediate CA certificate
            This is a potentially dangerous endpoint and only highly trusted users should have access.
            </summary>
            <param name="verbatimCertificateSigningRequestOptions"><para>[required]</para>
            The verbatim certificate request options.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The secret with the new certificate data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PKITidyAsync(VaultSharp.Backends.Secret.Models.PKI.TidyRequestOptions,System.String)">
            <summary>
            Allows tidying up the backend storage and/or CRL by removing certificates that have expired 
            and are past a certain buffer period beyond their expiration time.
            </summary>
            <param name="tidyRequestOptions"><para>[optional]</para>
            The tidy request options.</param>
            <param name="pkiBackendMountPoint"><para>[optional]</para>
            The mount point for the PKI backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI" />
            Provide a value only if you have customized the PKI mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PostgreSqlConfigureConnectionAsync(VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo,System.String)">
            <summary>
            Configures the connection information used to communicate with PostgreSql.
            </summary>
            <param name="postgreSqlConnectionInfo"><para>[required]</para>
            The PostgreSql connection information.</param>
            <param name="postgreSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the PostgreSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSql" />
            Provide a value only if you have customized the PostgreSql mount point.</param>
            <returns>   
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PostgreSqlReadConnectionInfoAsync(System.String,System.String)">
            <summary>
            Reads the connection information used to communicate with PostgreSql.
            </summary>
            <param name="postgreSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the PostgreSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSql" />
            Provide a value only if you have customized the PostgreSql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The connection information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PostgreSqlConfigureCredentialLeaseSettingsAsync(VaultSharp.Backends.Secret.Models.CredentialLeaseSettings,System.String)">
            <summary>
            Configures the lease settings for generated credentials. If not configured, leases default to 1 hour. 
            This API is a root protected call.
            </summary>
            <param name="credentialLeaseSettings"><para>[required]</para>
            The credential lease settings.</param>
            <param name="postgreSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the PostgreSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSql" />
            Provide a value only if you have customized the PostgreSql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PostgreSqlReadCredentialLeaseSettingsAsync(System.String,System.String)">
            <summary>
            Queries the PostgreSql credential lease settings.
            </summary>
            <param name="postgreSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the PostgreSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSql" />
            Provide a value only if you have customized the PostgreSql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The lease settings.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PostgreSqlWriteNamedRoleAsync(System.String,VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlRoleDefinition,System.String)">
            <summary>
            Creates or updates a named PostgreSql role definition.
            </summary>
            <param name="postgreSqlRoleName"><para>[required]</para>
            Name of the PostgreSql role.</param>
            <param name="postgreSqlRoleDefinition"><para>[required]</para>
            The PostgreSql role definition with the creation, rollback query and lease information.</param>
            <param name="postgreSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the PostgreSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSql" />
            Provide a value only if you have customized the PostgreSql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PostgreSqlReadNamedRoleAsync(System.String,System.String,System.String)">
            <summary>
            Queries a named PostgreSql role definition
            </summary>
            <param name="postgreSqlRoleName"><para>[required]</para>
            Name of the PostgreSql role.</param>
            <param name="postgreSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the PostgreSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSql" />
            Provide a value only if you have customized the PostgreSql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the PostgreSql role definition with the creation, rollback query and lease information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PostgreSqlReadRoleListAsync(System.String,System.String)">
            <summary>
            Returns a list of available roles. Only the role names are returned, not any values.
            </summary>
            <param name="postgreSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the PostgreSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSql" />
            Provide a value only if you have customized the PostgreSql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            A list of available roles. Only the role names are returned, not any values.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PostgreSqlDeleteNamedRoleAsync(System.String,System.String)">
            <summary>
            Deletes a named PostgreSql role definition
            </summary>
            <param name="postgreSqlRoleName"><para>[required]</para>
            Name of the PostgreSql role.</param>
            <param name="postgreSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the PostgreSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSql" />
            Provide a value only if you have customized the PostgreSql mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.PostgreSqlGenerateDynamicCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of dynamic credentials based on the named role.
            </summary>
            <param name="postgreSqlRoleName"><para>[required]</para>
            Name of the PostgreSql role.</param>
            <param name="postgreSqlBackendMountPoint"><para>[optional]</para>
            The mount point for the PostgreSql backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSql" />
            Provide a value only if you have customized the PostgreSql mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.Backends.Secret.Models.UsernamePasswordCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RabbitMQConfigureConnectionAsync(VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo,System.String)">
            <summary>
            Configures the connection information used to communicate with RabbitMQ.
            This API is a root protected call.
            </summary>
            <param name="rabbitMQConnectionInfo"><para>[required]</para>
            The RabbitMQ connection information.</param>
            <param name="rabbitMQBackendMountPoint"><para>[optional]</para>
            The mount point for the RabbitMQ backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.RabbitMQ" />
            Provide a value only if you have customized the RabbitMQ mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RabbitMQConfigureCredentialLeaseSettingsAsync(VaultSharp.Backends.Secret.Models.CredentialTimeToLiveSettings,System.String)">
            <summary>
            Configures the lease settings for generated credentials. If not configured, leases default to 1 hour. 
            This API is a root protected call.
            </summary>
            <param name="credentialTimeToLiveSettings"><para>[required]</para>
            The credential lease settings.</param>
            <param name="rabbitMQBackendMountPoint"><para>[optional]</para>
            The mount point for the RabbitMQ backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.RabbitMQ" />
            Provide a value only if you have customized the RabbitMQ mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RabbitMQReadCredentialLeaseSettingsAsync(System.String,System.String)">
            <summary>
            Queries the RabbitMQ credential lease settings.
            </summary>
            <param name="rabbitMQBackendMountPoint"><para>[optional]</para>
            The mount point for the RabbitMQ backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.RabbitMQ" />
            Provide a value only if you have customized the RabbitMQ mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The lease settings.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RabbitMQWriteNamedRoleAsync(System.String,VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQRoleDefinition,System.String)">
            <summary>
            Creates or updates a named RabbitMQ role.
            </summary>
            <param name="rabbitMQRoleName"><para>[required]</para>
            Name of the RabbitMQ role.</param>
            <param name="rabbitMQRoleDefinition"><para>[required]</para>
            The RabbitMQ role definition with the creation, rollback query and lease information.</param>
            <param name="rabbitMQBackendMountPoint"><para>[optional]</para>
            The mount point for the RabbitMQ backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.RabbitMQ" />
            Provide a value only if you have customized the RabbitMQ mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RabbitMQReadNamedRoleAsync(System.String,System.String,System.String)">
            <summary>
            Queries a named RabbitMQ role definition
            </summary>
            <param name="rabbitMQRoleName"><para>[required]</para>
            Name of the RabbitMQ role.</param>
            <param name="rabbitMQBackendMountPoint"><para>[optional]</para>
            The mount point for the RabbitMQ backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.RabbitMQ" />
            Provide a value only if you have customized the RabbitMQ mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the RabbitMQ role definition with the creation, rollback query and lease information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RabbitMQReadRoleListAsync(System.String,System.String)">
            <summary>
            Returns a list of available roles. Only the role names are returned, not any values.
            </summary>
            <param name="rabbitMQBackendMountPoint"><para>[optional]</para>
            The mount point for the RabbitMQ backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.RabbitMQ" />
            Provide a value only if you have customized the RabbitMQ mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            A list of available roles. Only the role names are returned, not any values.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RabbitMQDeleteNamedRoleAsync(System.String,System.String)">
            <summary>
            Deletes a named RabbitMQ role definition
            </summary>
            <param name="rabbitMQRoleName"><para>[required]</para>
            Name of the RabbitMQ role.</param>
            <param name="rabbitMQBackendMountPoint"><para>[optional]</para>
            The mount point for the RabbitMQ backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.RabbitMQ" />
            Provide a value only if you have customized the RabbitMQ mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RabbitMQGenerateDynamicCredentialsAsync(System.String,System.String,System.String)">
            <summary>
            Generates a new set of dynamic credentials based on the named role.
            </summary>
            <param name="rabbitMQRoleName"><para>[required]</para>
            Name of the RabbitMQ role.</param>
            <param name="rabbitMQBackendMountPoint"><para>[optional]</para>
            The mount point for the RabbitMQ backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.RabbitMQ" />
            Provide a value only if you have customized the RabbitMQ mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the <see cref="T:VaultSharp.Backends.Secret.Models.UsernamePasswordCredentials" /> as the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHWriteNamedKeyAsync(System.String,System.String,System.String)">
            <summary>
            Creates or updates a named key.
            This API is a root protected call.
            </summary>
            <param name="sshKeyName"><para>[required]</para>
            Name of the SSH key.</param>
            <param name="sshPrivateKey"><para>[required]</para>
            SSH private key with appropriate privileges on remote hosts.</param>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHDeleteNamedKeyAsync(System.String,System.String)">
            <summary>
            Deletes a named key.
            This API is a root protected call.
            </summary>
            <param name="sshKeyName"><para>[required]</para>
            Name of the SSH key.</param>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHWriteNamedRoleAsync(System.String,VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition,System.String)">
            <summary>
            Creates or updates a named role.
            </summary>
            <param name="sshRoleName"><para>[required]</para>
            Name of the SSH Role.</param>
            <param name="sshRoleDefinition"><para>[required]</para>
            The SSH role definition.</param>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHReadNamedRoleAsync(System.String,System.String,System.String)">
            <summary>
            Queries a named role.
            </summary>
            <param name="sshRoleName"><para>[required]</para>
            Name of the SSH Role.</param>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the role definition.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHReadRoleListAsync(System.String,System.String)">
            <summary>
            Returns a list of available roles. Only the role names are returned, not any values.
            </summary>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The list of role names.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHDeleteNamedRoleAsync(System.String,System.String)">
            <summary>
            Deletes a named role.
            </summary>
            <param name="sshRoleName"><para>[required]</para>
            Name of the SSH Role.</param>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHReadZeroAddressRolesAsync(System.String,System.String)">
            <summary>
            Returns the list of configured zero-address roles.
            </summary>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The roles.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHConfigureZeroAddressRolesAsync(System.String,System.String)">
            <summary>
            Configures zero-address roles.
            </summary>
            <param name="roleNames"><para>[required]</para>
            A string containing comma separated list of role names which allows credentials to be requested for any IP address. 
            CIDR blocks previously registered under these roles will be ignored.</param>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHDeleteZeroAddressRolesAsync(System.String)">
            <summary>
            Deletes the zero-address roles configuration.
            </summary>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHGenerateDynamicCredentialsAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a dynamic SSH credentials for a specific username and IP Address based on the named role.
            </summary>
            <param name="sshRoleName"><para>[required]</para>
            Name of the SSH Role.</param>
            <param name="ipAddress"><para>[required]</para>
            The ip address of the remote host.</param>
            <param name="username"><para>[optional]</para>
            The username on the remote host.</param>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the SSH credentials.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHLookupRolesAsync(System.String,System.String,System.String)">
            <summary>
            Lists all of the roles with which the given IP is associated.
            </summary>
            <param name="ipAddress"><para>[required]</para>
            The ip address of the remote host.</param>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with list of roles
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.SSHVerifyOTPAsync(System.String,System.String,System.String)">
            <summary>
            Verifies if the given OTP is valid.
            This is an unauthenticated endpoint.
            </summary>
            <param name="otp"><para>[required]</para>
            One-Time-Key that needs to be validated.</param>
            <param name="sshBackendMountPoint"><para>[optional]</para>
            The mount point for the SSH backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH" />
            Provide a value only if you have customized the SSH mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the OTP verification data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitCreateEncryptionKeyAsync(System.String,VaultSharp.Backends.Secret.Models.Transit.TransitKeyType,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a new named encryption key.
            This API is a root protected call.
            </summary>
            <param name="encryptionKeyName"><para>[required]</para>
            Name of the encryption key.</param>
            <param name="transitKeyType"><para>[required]</para>
            The type of key to create. The currently-supported types are: 
            <see cref="F:VaultSharp.Backends.Secret.Models.Transit.TransitKeyType.aes256_gcm96"/> : AES-256 wrapped with GCM using a 12-byte nonce size(symmetric)
            <see cref="F:VaultSharp.Backends.Secret.Models.Transit.TransitKeyType.ecdsa_p256"/> : ECDSA using the P-256 elliptic curve(asymmetric)
            Defaults to <see cref="F:VaultSharp.Backends.Secret.Models.Transit.TransitKeyType.aes256_gcm96"/>.</param>
            <param name="mustUseKeyDerivation"><para>[optional]</para>
            Boolean flag indicating if key derivation MUST be used.
            If enabled, all encrypt/decrypt requests to this named key must provide a context which is used for key derivation.
            Defaults to false.</param>
            <param name="doConvergentEncryption"><para>[optional]</para>
            Boolean flag when set, the key will support convergent encryption, where the same plaintext creates the same ciphertext. 
            This requires <see cref="!:mustUseKeyDerivation"/> to be set to true. 
            When enabled, each encryption(/decryption/rewrap/datakey) operation will require a nonce value to be specified. 
            Note that while this is useful for particular situations, all nonce values used with a given context value 
            must be unique or it will compromise the security of your key. 
            A common way to use this will be to generate a unique identifier for the given data (for instance, a SHA-512 sum), 
            then separate the bytes so that twelve bytes are used as the nonce and the remaining as the context, 
            ensuring that all bits of unique identity are used as a part of the encryption operation. 
            Defaults to false.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the Transit mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitGetEncryptionKeyInfoAsync(System.String,System.String,System.String)">
            <summary>
            Returns information about a named encryption key.
            This API is a root protected call.
            </summary>
            <param name="encryptionKeyName"><para>[required]</para>
            Name of the encryption key.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the Transit mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the key information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitGetEncryptionKeyListAsync(System.String,System.String)">
            <summary>
            Returns a list of keys. Only the key names are returned.
            </summary>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the Transit mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The list of key names.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitDeleteEncryptionKeyAsync(System.String,System.String)">
            <summary>
            Deletes a named encryption key.
            This API is a root protected call.
            It will no longer be possible to decrypt any data encrypted with the named key.
            Because this is a potentially catastrophic operation, the 'DeletionAllowed' tunable must be set in the key's configuration.
            </summary>
            <param name="encryptionKeyName"><para>[required]</para>
            Name of the encryption key.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the Transit mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitConfigureEncryptionKeyAsync(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Allows tuning configuration values for a given key. (These values are returned during a read operation on the named key.)
            This API is a root protected call.
            </summary>
            <param name="encryptionKeyName"><para>[required]</para>
            Name of the encryption key.</param>
            <param name="minimumDecryptionVersion"><para>[optional]</para>
            The minimum version of ciphertext allowed to be decrypted.
            Adjusting this as part of a key rotation policy can prevent old copies of ciphertext from being decrypted,
            should they fall into the wrong hands.
            Defaults to 0.</param>
            <param name="isDeletionAllowed"><para>[optional]</para>
            When set, the key is allowed to be deleted. Defaults to false.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the Transit mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitRotateEncryptionKeyAsync(System.String,System.String)">
            <summary>
            Rotates the version of the named key.
            After rotation, new plaintext requests will be encrypted with the new version of the key.
            To upgrade ciphertext to be encrypted with the latest version of the key,
            use the <see cref="M:VaultSharp.IVaultClient.TransitRewrapWithLatestEncryptionKeyAsync(System.String,System.String,System.String,System.String,System.String,System.String)" /> endpoint.
            </summary>
            <param name="encryptionKeyName"><para>[required]</para>
            Name of the encryption key.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the Transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the Transit mount point.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitEncryptAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Encrypts the provided plaintext using the named key.
            This path supports the create and update policy capabilities as follows: 
            if the user has the create capability for this endpoint in their policies, 
            and the key does not exist, it will be upserted with default values 
            (whether the key requires derivation depends on whether the context parameter is empty or not). 
            If the user only has update capability and the key does not exist, an error will be returned.
            </summary>
            <param name="encryptionKeyName"><para>[required]</para>
            Name of the key used to encrypt the text.</param>
            <param name="base64EncodedPlainText"><para>[required]</para>
            The plaintext to encrypt, provided as base64 encoded.</param>
            <param name="base64EncodedKeyDerivationContext"><para>[optional]</para>
            The key derivation context, provided as base64 encoded. Must be provided if derivation is enabled.</param>
            <param name="convergentEncryptionBase64EncodedNonce"><para>[optional]</para>
            The nonce value, provided as base64 encoded. Must be provided if convergent encryption is enabled for this key. 
            The value must be exactly 96 bits (12 bytes) long and the user must ensure that for any given context 
            (and thus, any given encryption key) this nonce value is never reused.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with cipher text.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitDecryptAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Decrypts the provided ciphertext using the named key.
            </summary>
            <param name="encryptionKeyName"><para>[required]</para>
            Name of the key used to decrypt the text.</param>
            <param name="cipherText"><para>[required]</para>
            The ciphertext to decrypt, provided as returned by encrypt.</param>
            <param name="base64EncodedKeyDerivationContext"><para>[optional]</para>
            The key derivation context, provided as base64 encoded. Must be provided if derivation is enabled.</param>
            <param name="convergentEncryptionBase64EncodedNonce"><para>[optional]</para>
            The nonce value used during encryption, provided as base64 encoded. 
            Must be provided if convergent encryption is enabled for this key.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with plain text.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitRewrapWithLatestEncryptionKeyAsync(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Transits the rewrap with latest encryption key asynchronous.
            </summary>
            <param name="encryptionKeyName"><para>[required]</para>
            Name of the encryption key.</param>
            <param name="cipherText"><para>[required]</para>
            The ciphertext to decrypt, provided as returned by encrypt.</param>
            <param name="base64EncodedKeyDerivationContext"><para>[optional]</para>
            The key derivation context, provided as base64 encoded. Must be provided if derivation is enabled.</param>
            <param name="convergentEncryptionBase64EncodedNonce"><para>[optional]</para>
            The nonce value used during encryption, provided as base64 encoded. 
            Must be provided if convergent encryption is enabled for this key.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with cipher text.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitCreateDataKeyAsync(System.String,System.Boolean,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Generate a new high-entropy key and the valued encrypted with the named key.
            Optionally return the plaintext of the key as well.
            As a result, you can use Vault ACL policies to control whether a user is allowed to retrieve the plaintext value of a key.
            This is useful if you want an untrusted user or operation to generate keys that are then made available to trusted users.
            </summary>
            <param name="encryptionKeyName"><para>[required]</para>
            Name of the encryption key.</param>
            <param name="returnKeyAsPlainText"><para>[optional]</para>
            If true, the plaintext key will be returned along with the ciphertext.
            If false, only the ciphertext value will be returned.
            Defaults to false.</param>
            <param name="base64EncodedKeyDerivationContext"><para>[optional]</para>
            The key derivation context, provided as base64 encoded. Must be provided if derivation is enabled.</param>
            <param name="convergentEncryptionBase64EncodedNonce"><para>[optional]</para>
            The nonce value, provided as base64 encoded. Must be provided if convergent encryption is enabled for this key. 
            The value must be exactly 96 bits (12 bytes) long and the user must ensure that for any given context 
            (and thus, any given encryption key) this nonce value is never reused.</param>
            <param name="keyBits"><para>[optional]</para>
            The number of bits in the desired key.
            Can be 128, 256, or 512; if not given, defaults to 256.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>
            The secret with the cipher text key.
            If <see cref="!:returnKeyAsPlainText" /> is true, the plaintext key will be returned along with the ciphertext.
            If false, only the ciphertext value will be returned.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitGenerateRandomBytes(System.Int32,System.String,System.String,System.String)">
            <summary>
            Return high-quality random bytes of the specified length.
            </summary>
            <param name="bytesToReturn"><para>[optional]</para>
            The number of bytes to return. Defaults to 32 (256 bits). </param>
            <param name="format"><para>[optional]</para>
             The output encoding; can be either hex or base64. Defaults to base64.
            </param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>Random bytes in the field 'random_bytes'.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitHashInput(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the hash of given data using the specified algorithm. 
            </summary>
            <param name="base64EncodedInput"><para>[required]</para>
            The base64 encoded input.</param>
            <param name="algorithm"><para>[optional]</para>The hash algorithm to use. 
            Currently-supported algorithms are:
            sha2-224
            sha2-256
            sha2-384
            sha2-512
            Defaults to sha2-256.</param>
            <param name="format"><para>[optional]</para>
             The output encoding; can be either hex or base64. Defaults to base64.
            </param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The hashed value in the field 'sum'.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitDigestInput(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the digest of given data using the specified hash algorithm and the named key. 
            </summary>
            <param name="keyName"><para>[required]</para>
            The key can be of any type supported by transit; the raw key will be marshalled into bytes 
            to be used for the HMAC function. 
            If the key is of a type that supports rotation, the latest (current) version will be used.</param>
            <param name="base64EncodedInput"><para>[required]</para>
            The base64 encoded input.</param>
            <param name="algorithm"><para>[optional]</para>The hash algorithm to use. 
            Currently-supported algorithms are:
            sha2-224
            sha2-256
            sha2-384
            sha2-512
            Defaults to sha2-256.</param>
            <param name="format"><para>[optional]</para>
             The output encoding; can be either hex or base64. Defaults to base64.
            </param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The hashed value in the field 'hmac'.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitSignInput(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the cryptographic signature of the given data using the named key and the specified hash algorithm.
            </summary>
            <param name="keyName"><para>[required]</para>
             The key must be of a type that supports signing.</param>
            <param name="base64EncodedInput"><para>[required]</para>
            The base64 encoded input.</param>
            <param name="algorithm"><para>[optional]</para>The hash algorithm to use. 
            Currently-supported algorithms are:
            sha2-224
            sha2-256
            sha2-384
            sha2-512
            Defaults to sha2-256.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The signed value in the field 'signature'.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.TransitVerifySignature(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns whether the provided signature is valid for the given data.
            </summary>
            <param name="keyName"><para>[required]</para>
             The key must be of a type that supports signing.</param>
            <param name="base64EncodedInput"><para>[required]</para>
            The base64 encoded input.</param>
            <param name="signature"><para>[optional]</para>
            The signature string. Either this must be supplied or <see cref="!:hmac"/> must be supplied.</param>
            <param name="hmac"><para>[optional]</para>
            The hmac string. Either this must be supplied or <see cref = "!:signature" /> must be supplied.</param>
            <param name="algorithm"><para>[optional]</para>The hash algorithm to use. 
            Currently-supported algorithms are:
            sha2-224
            sha2-256
            sha2-384
            sha2-512
            Defaults to sha2-256.</param>
            <param name="transitBackendMountPoint"><para>[optional]</para>
            The mount point for the transit backend. Defaults to <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit" />
            Provide a value only if you have customized the mount point.</param>
            <param name="wrapTimeToLive">
            <para>[required]</para>
            The TTL for the token and can be either an integer number of seconds or a string duration of seconds.
            </param>
            <returns>The boolean verification result value in the field 'valid'.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AppIdAuthenticationConfigureAppIdAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an App Id that associates with the policy value.
            The <see cref="!:displayName"/> sets the display name for audit logs and secrets. 
            </summary>
            <param name="appId">
            <para>[required]</para>
            The application identifier.</param>
            <param name="policyValue">
            <para>[required]</para>
            The policy value.</param>
            <param name="displayName">
            <para>[optional]</para>
            The display name.</param>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AppId" />
            Provide a value only if you have customized the path.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AppIdAuthenticationConfigureUserIdAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Configures the <see cref="!:userId"/> and says that it can be paired with <see cref="!:appIdValue"/> 
            but only if the client is in the <see cref="!:cidrBlock"/> (an optional construct).
            This means that if a client authenticates and provide both <see cref="!:appIdValue"/>  and <see cref="!:userId"/>, 
            then the <see cref="!:appIdValue"/> will authenticate that client with the policy.
            In practice, both the <see cref="!:userId"/> and <see cref="!:appIdValue"/>  are likely hard-to-guess UUID-like values.
            Note that it is possible to authorize multiple app IDs with each user ID by writing them as 
            comma-separated values to the user ID mapping. 
            </summary>
            <param name="userId">
            <para>[required]</para>
            The user identifier.</param>
            <param name="appIdValue">
            <para>[required]</para>
            The application identifier(s).</param>
            <param name="cidrBlock">
            <para>[optional]</para>
            The cidr block restriction for the user.</param>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AppId" />
            Provide a value only if you have customized the path.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AppRoleAuthenticationGetRolesAsync">
            <summary>
            Gets the list of existing AppRoles in the backend.
            raja todo.. fill in all strongly typed apis together.
            </summary>
            <returns>The list.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationConfigureClientAccessCredentialsAsync(VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AccessCredentials,System.String)">
            <summary>
            Configures the credentials required to perform API calls to AWS. 
            The instance identity document fetched from the PKCS#7 signature will provide 
            the EC2 instance ID. The credentials configured using this endpoint will be used 
            to query the status of the instances via DescribeInstances API.
            If static credentials are not provided using this endpoint, then the credentials will be 
            retrieved from the environment variables AWS_ACCESS_KEY, AWS_SECRET_KEY and AWS_REGION respectively. 
            If the credentials are still not found and if the backend is configured 
            on an EC2 instance with metadata querying capabilities, the credentials are fetched automatically.
            </summary>
            <param name="awsEc2AccessCredentials">
            <para>[optional]</para>
            AWS Access credentials.</param>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationGetClientAccessCredentialsAsync(System.String)">
            <summary>
            Returns the configured AWS access credentials.
            </summary>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The configured AWS access credentials.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationDeleteClientAccessCredentialsAsync(System.String)">
            <summary>
            Deletes the configured AWS access credentials.
            </summary>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationRegisterAwsPublicKeyAsync(VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2PublicKeyInfo,System.String)">
            <summary>
            Registers an AWS public key to be used to verify the instance identity documents. 
            While the PKCS#7 signature of the identity documents have DSA digest, 
            the identity signature will have RSA digest, and hence the public keys for each type varies respectively. 
            Indicate the type of the public key using the "type" parameter.
            </summary>
            <param name="awsEc2PublicKeyInfo">The aws ec2 public key information.</param>
            <param name="authenticationPath">The authentication path.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationGetAwsPublicKeyAsync(System.String,System.String)">
            <summary>
            Returns the configured AWS public key.
            </summary>
            <param name="certificateName">
            <para>[required]</para>
            The name of the certificate.
            </param>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The configured AWS access credentials.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationGetAwsPublicKeyListAsync(System.String)">
            <summary>
            Returns all the AWS public certificates that are registered with the backend.
            </summary>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The configured AWS access credentials.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationConfigureIdentityWhitelistTidyOptionsAsync(VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationTidyOptions,System.String)">
            <summary>
            Configures the periodic tidying operation of the whitelisted identity entries.
            </summary>
            <param name="awsEc2AuthenticationTidyOptions">The aws ec2 authentication tidy options.</param>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationGetIdentityWhitelistTidyOptionsAsync(System.String)">
            <summary>
            Returns the configured periodic whitelist tidying settings.
            </summary>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The tidy options.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationDeleteIdentityWhitelistTidyOptionsAsync(System.String)">
            <summary>
            Deletes the configured periodic whitelist tidying settings.
            </summary>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationConfigureRoletagBlacklistTidyOptionsAsync(VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationTidyOptions,System.String)">
            <summary>
            Configures the periodic tidying operation of the blacklisted identity entries.
            </summary>
            <param name="awsEc2AuthenticationTidyOptions">The aws ec2 authentication tidy options.</param>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationGetRoletagBlacklistTidyOptionsAsync(System.String)">
            <summary>
            Returns the configured periodic blacklisted tidying settings.
            </summary>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The tidy options.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationDeleteRoletagBlacklistTidyOptionsAsync(System.String)">
            <summary>
            Deletes the configured periodic blacklisted tidying settings.
            </summary>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.AwsEc2AuthenticationRegisterRoleAsync(VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole,System.String)">
            <summary>
            Registers a role in the backend. 
            Only those instances which are using the role registered using this endpoint, 
            will be able to perform the login operation. 
            Constraints can be specified on the role, that are applied on the instances attempting to login. 
            At least one constraint should be specified on the role.
            </summary>
            <param name="awsEc2AuthenticationRole">
            <para>[required]</para>
            The aws ec2 authentication role.</param>
            <param name="authenticationPath"><para>[optional]</para>
            The path for the authentication backend. 
            Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendDefaultPaths.AwsEc2" />
            Provide a value only if you have customized the path.</param>
            <returns></returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.EnableMultiFactorAuthenticationAsync(System.String,System.String)">
            <summary>
            Enables multi factor authentication with the specific type.
            </summary>
            <param name="supportedAuthenticationBackendMountPoint">
            <para>[required]</para>
            The supported authentication backend mount point.
            </param>
            <param name="mfaType">
            <para>[required]</para>
            Type of the mfa.
            </param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.WriteDuoAccessAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Writes contains connection information for the Duo Auth API.
            </summary>
            <param name="supportedAuthenticationBackendMountPoint">
            <para>[required]</para>
            The supported authentication backend mount point.
            </param>
            <param name="host">
            <para>[required]</para>
            The host.
            </param>
            <param name="integrationKey">
            <para>[required]</para>
            The integration key.
            </param>
            <param name="secretKey">
            <para>[required]</para>
            The secret key.
            </param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.WriteDuoConfigurationAsync(System.String,System.String,System.String)">
            <summary>
            Writes the duo configuration asynchronous.
            </summary>
            <param name="supportedAuthenticationBackendMountPoint">
            <para>[required]</para>
            The supported authentication backend mount point.
            </param>
            <param name="userAgent">
            <para>[required]</para>
            The user agent to use when connecting to Duo.
            </param>
            <param name="usernameFormat">
            <para>[required]</para>
            The username format which controls how the username used to login is transformed before authenticating with Duo. 
            This field is a format string that is passed the original username as its first argument and outputs the new username. 
            For example "%s@example.com" would append "@example.com" to the provided username before connecting to Duo.
            </param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.ReadSecretAsync(System.String)">
            <summary>
            An all-purpose method to read any value from vault from any path.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is stored.</param>
            <returns>
            The data as a general dictionary along with the lease information.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.WriteSecretAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            An all-purpose method to write any value to vault at any path.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <param name="values"><para>[required]</para>
            The value to be written.</param>
            <returns>
            The data as a general dictionary if any data is returned by Vault.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.DeleteSecretAsync(System.String)">
            <summary>
            Deletes the value at the specified path in Vault.
            </summary>
            <param name="path"><para>[required]</para>
            The path where the value is to be stored.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetTokenAccessorListAsync">
            <summary>
            Gets the list of token accessors. This requires root capability, and access to it should be tightly 
            controlled as the accessors can be used to revoke very large numbers of tokens 
            and their associated leases at once.
            </summary>
            <returns>The list of accessors.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.CreateTokenAsync(VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions)">
            <summary>
            Creates a new token.
            <para>
            Certain options are only available to when called by a root token.
            If used with the 'createAsOrphan' flag, a root token is not required to create an orphan token (otherwise set with the noParent option).
            </para>
            </summary>
            <param name="tokenCreationOptions">The token creation options.</param>
            <returns>
            The secret with the data.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetTokenInfoAsync(System.String)">
            <summary>
            Gets the token information for the provided <see cref="!:token" />.
            </summary>
            <param name="token"><para>[required]</para>
            The token.</param>
            <returns>
            The secret with <see cref="T:VaultSharp.Backends.Authentication.Models.Token.TokenInfo" />.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetTokenInfoByAccessorAsync(System.String)">
            <summary>
            Gets the properties of the token associated with the accessor, 
            except the token ID. 
            This is meant for purposes where there is no access to token ID 
            but there is need to fetch the properties of a token.
            </summary>
            <param name="tokenAccessor"><para>[required]</para>
             Accessor of the token to lookup.</param>
            <returns>The token info.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetCallingTokenInfoAsync">
            <summary>
            Gets the calling client token information. i.e. the token used by the client as part of this call.
            </summary>
            <returns>
            The secret with <see cref="T:VaultSharp.Backends.Authentication.Models.Token.CallingTokenInfo" />.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RenewTokenAsync(System.String,System.Nullable{System.Int32})">
            <summary>
            Renews a lease associated with the calling token.
            This is used to prevent the expiration of a token, and the automatic revocation of it.
            Token renewal is possible only if there is a lease associated with it.
            </summary>
            <param name="token"><para>[required]</para>
            The token to renew.</param>
            <param name="incrementSeconds"><para>[optional]</para>
            A requested amount of time in seconds to extend the lease. This is advisory and may be ignored.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RenewCallingTokenAsync(System.Nullable{System.Int32})">
            <summary>
            Renews a lease associated with the calling token.
            This is used to prevent the expiration of a token, and the automatic revocation of it.
            Token renewal is possible only if there is a lease associated with it.
            </summary>
            <param name="incrementSeconds"><para>[optional]</para>
            A requested amount of time in seconds to extend the lease. This is advisory and may be ignored.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RevokeTokenAsync(System.String,System.Boolean)">
            <summary>
            Revokes a token and all child tokens if the <see cref="!:revokeAllChildTokens" /> value is <value>true</value>.
            When the token is revoked, all secrets generated with it are also revoked.
            </summary>
            <param name="token"><para>[required]</para>
            The token to revoke.</param>
            <param name="revokeAllChildTokens"><para>[required]</para>
            if set to <c>true</c> [revoke all child tokens].
            else only the current token is revoked. All child tokens are orphaned, but can be revoked subsequently.</param>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RevokeTokenByAccessorAsync(System.String)">
            <summary>
            Revokes the token associated with the accessor and all the child tokens. 
            This is meant for purposes where there is no access to token ID 
            but there is need to revoke a token and its children.
            </summary>
            <param name="tokenAccessor"><para>[required]</para>
            Accessor of the token.</param>
            <returns>The token info.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.RevokeCallingTokenAsync">
            <summary>
            Revokes the calling client token and all child tokens.
            When the token is revoked, all secrets generated with it are also revoked.
            </summary>
            <returns>
            The task.
            </returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.DeleteTokenRoleAsync(System.String)">
            <summary>
            Deletes the token role.
            </summary>
            <param name="roleName">Name of the role.</param>
            <returns>The task.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetTokenRoleInfoAsync(System.String)">
            <summary>
            Gets the token role information.
            </summary>
            <param name="roleName">Name of the role.</param>
            <returns>The role configuration.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.GetTokenRoleListAsync">
            <summary>
            Gets the token role list.
            </summary>
            <returns>The role list.</returns>
        </member>
        <member name="M:VaultSharp.IVaultClient.WriteTokenRoleInfoAsync(VaultSharp.Backends.Authentication.Models.Token.TokenRoleDefinition)">
            <summary>
            Creates (or replaces) the named role. 
            Roles enforce specific behavior when creating tokens that allow token functionality 
            that is otherwise not available or would require sudo/root privileges to access. 
            Role parameters, when set, override any provided options to the create endpoints. 
            The role name is also included in the token path, allowing all tokens created 
            against a role to be revoked using the <see cref="M:VaultSharp.IVaultClient.RevokeAllSecretsOrTokensUnderPrefixAsync(System.String)"/> endpoint.
            </summary>
            <param name="tokenRoleDefinition">The token role definition.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:VaultSharp.VaultClientFactory">
            <summary>
            Represents a set of methods for creating instances of the <see cref="T:VaultSharp.IVaultClient" /> interface implementations.
            </summary>
        </member>
        <member name="M:VaultSharp.VaultClientFactory.CreateVaultClient(System.Uri,VaultSharp.Backends.Authentication.Models.IAuthenticationInfo,System.Boolean,System.Nullable{System.TimeSpan},System.Action{System.Net.Http.HttpClient})">
            <summary>
            Creates an instance of the vault client, with the provided <see cref="T:VaultSharp.Backends.Authentication.Models.IAuthenticationInfo" /> used to authenticate and authorize the user.
            This is the typical client you would need for your consuming applications.
            <para>
            If you need an instance of an administrative/root user based <see cref="T:VaultSharp.IVaultClient" />, pass a <see cref="T:VaultSharp.Backends.Authentication.Models.IAuthenticationInfo" /> with a root policy mapping.
            If you need an instance of an unauthenticated <see cref="T:VaultSharp.IVaultClient" />, pass a <value>null</value> value for <see cref="T:VaultSharp.Backends.Authentication.Models.IAuthenticationInfo" />.
            An unauthenticated client can do very few operations. e.g. Check seal status, initialization status etc.
            </para><para>var vaultClient = VaultClientFactory.CreateVaultClient(new Uri("http://127.0.0.1:8200", new GitHubAuthenticationInfo(personalAccessToken: "YOUR_TOKEN"));</para><para>var administrativeVaultClient = VaultClientFactory.CreateVaultClient(new Uri("http://127.0.0.1:8200", new TokenAuthenticationInfo(token: "ROOT_POLICY_TOKEN"));</para><para>var unauthenticatedVaultClient = VaultClientFactory.CreateVaultClient(new Uri("http://127.0.0.1:8200", authenticationInfo: null));</para>
            </summary>
            <param name="vaultServerUriWithPort"><para>[required]</para>
            The vault server URI with port.</param>
            <param name="authenticationInfo"><para>[optional]</para>
            The authentication information. e.g. GitHub, AppId, LDAP etc.</param>
            <param name="continueAsyncTasksOnCapturedContext"><para>[optional]</para>
            if set to <c>true</c> [continue asynchronous tasks on captured context].</param>
            <param name="serviceTimeout"><para>[optional]</para>
            The timeout value for the Vault Service calls. Do not specify a value, if you want to go with the default timeout values.</param>
            <param name="postHttpClientInitializeAction"><para>[optional]</para>
            A post-processing delegate on the <see cref="T:System.Net.Http.HttpClient"/> instance used by the library.
            This can be used to setup any custom message handlers, proxy settings etc.
            Please note that the delegate will get an instance of <see cref="T:System.Net.Http.HttpClient"/> that is initialized with the address
            and timeout settings.
            </param>
            <returns>
            An instance of the <see cref="T:VaultSharp.IVaultClient" /> interface implementation.
            </returns>
        </member>
        <member name="T:VaultSharp.Backends.Audit.Models.AuditBackend">
            <summary>
            Represents an audit backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.AuditBackend.MountPoint">
            <summary>
            Gets or sets the mount point. If not set, the value will default to the <see cref="P:VaultSharp.Backends.Audit.Models.AuditBackend.BackendType"/> value.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.AuditBackend.BackendType">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.AuditBackend.Description">
            <summary>
            <para>[optional]</para>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Audit.Models.AuditBackendOptionsBase">
            <summary>
            Represents the base class for auti backend options.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.AuditBackendOptionsBase.LogSensitiveDataInRawFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [log sensitive data in raw format].
            Defaults to <value>"false"</value>.
            </summary>
            <value>
            <c>true</c> if [log sensitive data in raw format]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.AuditBackendOptionsBase.HmacAccessor">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [hmac accessor].
            A boolean, if set, enables the hashing of token accessor. 
            Defaults to true. 
            This option is useful only when <see cref="P:VaultSharp.Backends.Audit.Models.AuditBackendOptionsBase.LogSensitiveDataInRawFormat"/> is false.
            </summary>
            <value>
              <c>true</c> if [hmac accessor]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.AuditBackendOptionsBase.Format">
            <summary>
            Gets or sets the format.
            Allows selecting the output format. 
            Valid values are json (the default) and jsonx, which formats the normal log entries as XML.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Audit.Models.AuditBackendOptionsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Audit.Models.AuditBackendOptionsBase"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Audit.Models.AuditBackendType">
            <summary>
            A helper class for retrieving and comparing Audit Backend types.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Audit.Models.AuditBackendType.FileType">
            <summary>
            The file type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Audit.Models.AuditBackendType.SyslogType">
            <summary>
            The syslog type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Audit.Models.AuditBackendType._type">
            <summary>
            The _type
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.AuditBackendType.File">
            <summary>
            Gets the file.
            </summary>
            <value>
            The file.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.AuditBackendType.Syslog">
            <summary>
            Gets the syslog.
            </summary>
            <value>
            The syslog.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.AuditBackendType.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Audit.Models.AuditBackendType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Audit.Models.AuditBackendType"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:VaultSharp.Backends.Audit.Models.AuditBackendType.op_Equality(VaultSharp.Backends.Audit.Models.AuditBackendType,VaultSharp.Backends.Audit.Models.AuditBackendType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Audit.Models.AuditBackendType.op_Inequality(VaultSharp.Backends.Audit.Models.AuditBackendType,VaultSharp.Backends.Audit.Models.AuditBackendType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Audit.Models.AuditBackendType.Equals(VaultSharp.Backends.Audit.Models.AuditBackendType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Audit.Models.AuditBackendType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Audit.Models.AuditBackendType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Audit.Models.AuditBackendType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.Backends.Audit.Models.Custom.CustomAuditBackend">
            <summary>
            Represents a custom <see cref="T:VaultSharp.Backends.Audit.Models.AuditBackendType"/> based audit backend.
            </summary>
        </member>
        <member name="M:VaultSharp.Backends.Audit.Models.Custom.CustomAuditBackend.#ctor(VaultSharp.Backends.Audit.Models.AuditBackendType)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Audit.Models.Custom.CustomAuditBackend"/> class.
            </summary>
            <param name="auditBackendType">Type of the audit backend.</param>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.Custom.CustomAuditBackend.Options">
            <summary>
            <para>[optional]</para>
            Gets or sets the generic options. Use any key/value pairs suitable for the custom audit backend.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.Custom.CustomAuditBackend.BackendType">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Audit.Models.File.FileAuditBackend">
            <summary>
            Represents the <see cref="P:VaultSharp.Backends.Audit.Models.AuditBackendType.File"/> based audit backend.
            This audit backend writes audit logs to a file.
            This is a very simple audit backend: it appends logs to a file.
            It does not currently assist with any log rotation.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.File.FileAuditBackend.BackendType">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.File.FileAuditBackend.Options">
            <summary>
            <para>[optional]</para>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Audit.Models.File.FileAuditBackendOptions">
            <summary>
            Represents the options for the <see cref="T:VaultSharp.Backends.Audit.Models.File.FileAuditBackend"/>.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.File.FileAuditBackendOptions.FilePath">
            <summary>
            <para>[required]</para>
            Gets or sets the path to where the file will be written. 
            If this path exists, the audit backend will append to it.
            </summary>
            <value>
            The file path.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Audit.Models.Syslog.SyslogAuditBackend">
            <summary>
            Represents the <see cref="P:VaultSharp.Backends.Audit.Models.AuditBackendType.Syslog"/> based audit backend.
            This audit backend writes audit logs to syslog.
            It currently does not support a configurable syslog destination, and always sends to the local agent.
            This backend is only supported on Unix systems, and should not be enabled if any standby Vault instances do not support it.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.Syslog.SyslogAuditBackend.BackendType">
            <summary>
            <para>[required]</para>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.Syslog.SyslogAuditBackend.Options">
            <summary>
            <para>[optional]</para>
            Gets or sets the options.
            </summary>
            <value>
            The options.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Audit.Models.Syslog.SyslogAuditBackendOptions">
            <summary>
            Represents the options for the <see cref="T:VaultSharp.Backends.Audit.Models.Syslog.SyslogAuditBackend"/>.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.Syslog.SyslogAuditBackendOptions.Facility">
            <summary>
            <para>[optional]</para>
            Gets or sets the syslog facility to use. 
            Defaults to "AUTH".
            </summary>
            <value>
            The facility.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Audit.Models.Syslog.SyslogAuditBackendOptions.Tag">
            <summary>
            <para>[optional]</para>
            Gets or sets the syslog tag to use.
            Defaults to "vault".
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Audit.Models.Syslog.SyslogAuditBackendOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Audit.Models.Syslog.SyslogAuditBackendOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.AuthenticationBackend">
            <summary>
            Represents an authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackend.AuthenticationPath">
            <summary>
            Gets or sets the authentication path. If not set, the value will default to the <see cref="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackend.BackendType"/> value.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackend.BackendType">
            <summary>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackend.Description">
            <summary>
            Gets or sets a human-friendly description of the auth backend.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType">
            <summary>
            A helper class for retrieving and comparing Authentication Backend types.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.AppIdType">
            <summary>
            The application identifier type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.AppRoleType">
            <summary>
            The application role type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.AwsEc2RoleType">
            <summary>
            The aws ec2 role type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.GitHubType">
            <summary>
            The git hub type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.LDAPType">
            <summary>
            The LDAP type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.CertificateType">
            <summary>
            The certificate type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.TokenType">
            <summary>
            The token type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.UsernamePasswordType">
            <summary>
            The username password type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType._type">
            <summary>
            The _type
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.AppId">
            <summary>
            Gets the application identifier type.
            </summary>
            <value>
            The application identifier.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.AppRole">
            <summary>
            Gets the application role.
            </summary>
            <value>
            The application role.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.AwsEc2">
            <summary>
            Gets the aws ec2.
            </summary>
            <value>
            The aws ec2.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.GitHub">
            <summary>
            Gets the git hub type.
            </summary>
            <value>
            The git hub.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.LDAP">
            <summary>
            Gets the LDAP type.
            </summary>
            <value>
            The LDAP.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.Certificate">
            <summary>
            Gets the certificate type.
            </summary>
            <value>
            The certificate.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.Token">
            <summary>
            Gets the token type.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.UsernamePassword">
            <summary>
            Gets the generic type.
            </summary>
            <value>
            The generic.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.Type">
            <summary>
            Gets the type type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.op_Equality(VaultSharp.Backends.Authentication.Models.AuthenticationBackendType,VaultSharp.Backends.Authentication.Models.AuthenticationBackendType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.op_Inequality(VaultSharp.Backends.Authentication.Models.AuthenticationBackendType,VaultSharp.Backends.Authentication.Models.AuthenticationBackendType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.Equals(VaultSharp.Backends.Authentication.Models.AuthenticationBackendType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.IAuthenticationInfo">
            <summary>
            Provides an interface to provide authentication information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.IAuthenticationInfo.AuthenticationBackendType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.AppId.AppIdAuthenticationInfo">
            <summary>
            Represents the login information for the AppId Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AppId.AppIdAuthenticationInfo.AuthenticationBackendType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AppId.AppIdAuthenticationInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AppId.AppIdAuthenticationInfo.AppId">
            <summary>
            Gets the application identifier.
            </summary>
            <value>
            The application identifier.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AppId.AppIdAuthenticationInfo.UserId">
            <summary>
            Gets the user identifier.
            </summary>
            <value>
            The user identifier.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AppId.AppIdAuthenticationInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.AppId.AppIdAuthenticationInfo" /> class.
            </summary>
            <param name="appId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AppId.AppIdAuthenticationInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.AppId.AppIdAuthenticationInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="appId">The application identifier.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.AppRole.AppRoleAuthenticationInfo">
            <summary>
            Represents the login information for the AppRole Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AppRole.AppRoleAuthenticationInfo.AuthenticationBackendType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AppRole.AppRoleAuthenticationInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AppRole.AppRoleAuthenticationInfo.RoleId">
            <summary>
            Gets the role identifier.
            RoleID is an identifier that selects the AppRole against which the other credentials are evaluated. 
            When authenticating against this backend's login endpoint, the RoleID is a required argument 
            at all times. By default, RoleIDs are unique UUIDs, which allow them to serve as secondary 
            secrets to the other credential information. 
            However, they can be set to particular values to match introspected information by the 
            client (for instance, the client's domain name).
            </summary>
            <value>
            The role identifier.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AppRole.AppRoleAuthenticationInfo.SecretId">
            <summary>
            Gets the secret identifier.
            SecretID is a credential that is required by default for any login and is intended to always be secret.
            (For advanced usage, requiring a SecretID can be disabled via an AppRole's bind_secret_id parameter, 
            allowing machines with only knowledge of the RoleID, or matching other set constraints, 
            to fetch a token). 
            SecretIDs can be created against an AppRole either via generation of a 
            128-bit purely random UUID by the role itself (Pull mode) or via specific, 
            custom values (Push mode). Similarly to tokens, SecretIDs have properties like usage-limit, 
            TTLs and expirations.
            </summary>
            <value>
            The secret identifier.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AppRole.AppRoleAuthenticationInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.AppRole.AppRoleAuthenticationInfo"/> class.
            </summary>
            <param name="roleId">
            The role identifier.
            RoleID is an identifier that selects the AppRole against which the other credentials are evaluated. 
            When authenticating against this backend's login endpoint, the RoleID is a required argument 
            at all times. By default, RoleIDs are unique UUIDs, which allow them to serve as secondary 
            secrets to the other credential information. 
            However, they can be set to particular values to match introspected information by the 
            client (for instance, the client's domain name).
            </param>
            <param name="secretId">
            The secret identifier.
            SecretID is a credential that is required by default for any login and is intended to always be secret.
            (For advanced usage, requiring a SecretID can be disabled via an AppRole's bind_secret_id parameter, 
            allowing machines with only knowledge of the RoleID, or matching other set constraints, 
            to fetch a token). 
            SecretIDs can be created against an AppRole either via generation of a 
            128-bit purely random UUID by the role itself (Pull mode) or via specific, 
            custom values (Push mode). Similarly to tokens, SecretIDs have properties like usage-limit, 
            TTLs and expirations.
            </param>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AppRole.AppRoleAuthenticationInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.AppRole.AppRoleAuthenticationInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="roleId">
            The role identifier.
            RoleID is an identifier that selects the AppRole against which the other credentials are evaluated. 
            When authenticating against this backend's login endpoint, the RoleID is a required argument 
            at all times. By default, RoleIDs are unique UUIDs, which allow them to serve as secondary 
            secrets to the other credential information. 
            However, they can be set to particular values to match introspected information by the 
            client (for instance, the client's domain name).
            </param>
            <param name="secretId">
            The secret identifier.
            SecretID is a credential that is required by default for any login and is intended to always be secret.
            (For advanced usage, requiring a SecretID can be disabled via an AppRole's bind_secret_id parameter, 
            allowing machines with only knowledge of the RoleID, or matching other set constraints, 
            to fetch a token). 
            SecretIDs can be created against an AppRole either via generation of a 
            128-bit purely random UUID by the role itself (Pull mode) or via specific, 
            custom values (Push mode). Similarly to tokens, SecretIDs have properties like usage-limit, 
            TTLs and expirations.
            </param>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AccessCredentials">
            <summary>
            Represents the AWS EC2 Client access credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AccessCredentials.AccessKey">
            <summary>
            <para>[required]</para>
            Gets or sets the AWS Access key with permissions to query EC2 DescribeInstances API.
            </summary>
            <value>
            The access key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AccessCredentials.SecretKey">
            <summary>
            <para>[required]</para>
            Gets or sets the AWS Secret key with permissions to query EC2 DescribeInstances API.
            </summary>
            <value>
            The secret key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AccessCredentials.Endpoint">
            <summary>
            <para>[optional]</para>
            Gets or sets the URL to override the default generated endpoint for making AWS EC2 API calls.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationInfo">
            <summary>
            Represents the login information for the AwsEc2 Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationInfo.AuthenticationBackendType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationInfo.Pkcs7">
            <summary>
            Gets the PKCS7 signature of the identity document with all \n characters removed.
            </summary>
            <value>
            The PKCS7 signature.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationInfo.Nonce">
            <summary>
            Gets the nonce created by a client of this backend. 
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationInfo.RoleName">
            <summary>
            Gets the name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login. 
            If a matching role is not found, login fails.
            </summary>
            <value>
            The role name.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationInfo"/> class.
            </summary>
            <param name="pkcs7">
            <para>[required]</para>
            The PKCS7 signature of the identity document with all \n characters removed..</param>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce created by a client of this backend. 
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.</param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationInfo"/> class.
            </summary>
            <param name="mountPoint">
            <para>[required]</para>
            The mount point.</param>
            <param name="pkcs7">
            <para>[required]</para>
            The PKCS7 signature of the identity document with all \n characters removed..</param>
            <param name="nonce">
            <para>[required/optional]</para>
            The nonce created by a client of this backend. 
            When <see cref="!:disallowReauthentication"/> option is enabled on either the role 
            or the role tag, then nonce parameter is optional. 
            It is a required parameter otherwise.</param>
            <param name="roleName">
            <para>[optional]</para>
            The name of the role against which the login is being attempted. 
            If role is not specified, then the login endpoint looks for a role bearing 
            the name of the AMI ID of the EC2 instance that is trying to login. 
            If a matching role is not found, login fails.
            </param>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole">
            <summary>
            Represents the AWS EC2 role.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.RoleName">
            <summary>
            <para>[required]</para> 
            Gets or sets the name of the role.
            </summary>
            <value>
            The name of the role.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.BoundAmiId">
            <summary>
            <para>[optional]</para> 
            Gets or sets the bound ami identifier.
            If set, defines a constraint on the EC2 instances that they should be using the AMI ID 
            specified by this parameter.
            </summary>
            <value>
            The bound ami identifier.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.BoundAccountId">
            <summary>
            <para>[optional]</para> 
            Gets or sets the bound account identifier.
            If set, defines a constraint on the EC2 instances that the account ID in its 
            identity document to match the one specified by this parameter.
            </summary>
            <value>
            The bound account identifier.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.BoundIamRoleArn">
            <summary>
            <para>[optional]</para>
            Gets or sets the bound iam role arn.
            If set, defines a constraint on the authenticating EC2 instance that it 
            must match the IAM role ARN specified by this parameter. 
            The value is prefix-matched (as though it were a glob ending in *). 
            The configured IAM user or EC2 instance role must be allowed to execute 
            the iam:GetInstanceProfile action if this is specified.
            </summary>
            <value>
            The bound iam role arn.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.BoundIamInstanceProfileArn">
            <summary>
            <para>[optional]</para>
            Gets or sets the bound iam instance profile arn.
            If set, defines a constraint on the EC2 instances to be associated with an IAM instance 
            profile ARN which has a prefix that matches the value specified by this parameter. 
            The value is prefix-matched (as though it were a glob ending in *).
            </summary>
            <value>
            The bound iam instance profile arn.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.RoleTag">
            <summary>
            <para>[optional]</para>
            Gets or sets the role tag.
            If set, enables the role tags for this role. 
            The value set for this field should be the 'key' of the tag on the EC2 instance. 
            The 'value' of the tag should be generated using 'role//tag' endpoint. 
            Defaults to an empty string, meaning that role tags are disabled.
            </summary>
            <value>
            The role tag.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the time to live.
            The TTL period of tokens issued using this role, provided as "1h", where hour is the largest suffix.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.MaximumTimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the maximum allowed time to live.
            The maximum allowed lifetime of tokens issued using this role.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.Policies">
            <summary>
            <para>[optional]</para>
            Gets or sets the Policies to be set on tokens issued using this role.
            </summary>
            <value>
            The policies.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.AllowInstanceMigration">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [allow instance migration].
            If set, allows migration of the underlying instance where the client resides. 
            This keys off of pendingTime in the metadata document, so essentially, 
            this disables the client nonce check whenever the instance is migrated to a 
            new host and pendingTime is newer than the previously-remembered time. 
            Use with caution.
            </summary>
            <value>
            <c>true</c> if [allow instance migration]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.DisallowReauthentication">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [disallow reauthentication].
            If set, only allows a single token to be granted per instance ID. 
            In order to perform a fresh login, the entry in whitelist for the instance ID 
            needs to be cleared using 'auth/aws-ec2/identity-whitelist/' endpoint. 
            Defaults to 'false'.
            </summary>
            <value>
            <c>true</c> if [disallow reauthentication]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationRole"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationTidyOptions">
            <summary>
            Represents the AWS EC2 tidying options.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationTidyOptions.SafetyBuffer">
            <summary>
            <para>[optional]</para> 
            Gets or sets the amount of extra time that must have passed beyond the roletag expiration, 
            before it is removed from the backend storage. Defaults to 72h.
            </summary>
            <value>
            The aws public key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationTidyOptions.DisablePeriodicTidy">
            <summary>
            <para>[optional]</para>
            If set to <c>true</c>, disables the periodic tidying of the 'identity-whitelist/' entries.
            </summary>
            <value>
              <c>true</c> if [disable periodic tidy]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationTidyOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2AuthenticationTidyOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2DocumentType">
            <summary>
            Represents the aws ec2 document type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2DocumentType.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2DocumentType.pkcs7">
            <summary>
            The PKCS7
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2DocumentType.instance">
            <summary>
            The instance
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2PublicKeyInfo">
            <summary>
            Represents the AWS EC2 Client access credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2PublicKeyInfo.CertificateName">
            <summary>
            <para>[required]</para>
            Gets or sets the name of the certificate.
            </summary>
            <value>
            The name of the certificate.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2PublicKeyInfo.AwsPublicKey">
            <summary>
            <para>[required]</para> 
            Gets or sets the AWS Public key required to verify PKCS7 signature of the EC2 instance metadata.
            </summary>
            <value>
            The aws public key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2PublicKeyInfo.DocumentType">
            <summary>
            <para>[optional]</para>
            Gets or sets the type of document which can be verified using the given certificate. 
            The PKCS#7 document will have a DSA digest and the identity signature will have an RSA signature, 
            and accordingly the public certificates to verify those also vary. Defaults to <see cref="F:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2DocumentType.pkcs7"/>.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2PublicKeyInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.AwsEc2.AwsEc2PublicKeyInfo"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.Certificate.CertificateAuthenticationInfo">
            <summary>
            Represents the login information for the Certificate Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Certificate.CertificateAuthenticationInfo.AuthenticationBackendType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Certificate.CertificateAuthenticationInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Certificate.CertificateAuthenticationInfo.ClientCertificate">
            <summary>
            Gets the client certificate.
            </summary>
            <value>
            The client certificate.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.Certificate.CertificateAuthenticationInfo.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.Certificate.CertificateAuthenticationInfo" /> class.
            </summary>
            <param name="clientCertificate">The client certificate.</param>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.Certificate.CertificateAuthenticationInfo.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.Certificate.CertificateAuthenticationInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="clientCertificate">The client certificate.</param>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.Custom.CustomAuthenticationInfo">
            <summary>
            Represents the login information for the Custom Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Custom.CustomAuthenticationInfo.AuthenticationBackendType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Custom.CustomAuthenticationInfo.AuthenticationTokenAsyncDelegate">
            <summary>
            Gets the authentication token asynchronous delegate.
            </summary>
            <value>
            The authentication token asynchronous delegate.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.Custom.CustomAuthenticationInfo.#ctor(System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.Custom.CustomAuthenticationInfo"/> class.
            </summary>
            <param name="type">The type of the unknown authentication backend type not supported by this library yet. e.g. liveid, facebook etc.</param>
            <param name="authenticationTokenAsyncDelegate">The authentication token asynchronous delegate.</param>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.GitHub.GitHubAuthenticationInfo">
            <summary>
            Represents the login information for the GitHub Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.GitHub.GitHubAuthenticationInfo.AuthenticationBackendType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.GitHub.GitHubAuthenticationInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.GitHub.GitHubAuthenticationInfo.PersonalAccessToken">
            <summary>
            Gets the personal access token.
            </summary>
            <value>
            The personal access token.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.GitHub.GitHubAuthenticationInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.GitHub.GitHubAuthenticationInfo" /> class.
            </summary>
            <param name="personalAccessToken">The personal access token.</param>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.GitHub.GitHubAuthenticationInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.GitHub.GitHubAuthenticationInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="personalAccessToken">The personal access token.</param>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo">
            <summary>
            Represents the login information for the LDAP Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo.AuthenticationBackendType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo.Username">
            <summary>
            Gets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo.MultiFactorPasscode">
            <summary>
            Gets the multi factor passcode.
            </summary>
            <value>
            The multi factor passcode.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo.MultiFactorMethod">
            <summary>
            Gets the multi factor method.
            </summary>
            <value>
            The multi factor method.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.LDAP.LDAPAuthenticationInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="multiFactorPasscode">The multi factor passcode.</param>
            <param name="multiFactorMethod">The multi factor method.</param>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.Token.CallingTokenInfo">
            <summary>
            Represents the information associated with the calling token.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.CallingTokenInfo.Accessor">
            <summary>
            Gets or sets the accessor.
            </summary>
            <value>
            The accessor.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.CallingTokenInfo.ExplicitMaximumTimeToLive">
            <summary>
            Gets or sets the explicit maximum time to live.
            </summary>
            <value>
            The explicit maximum time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.CallingTokenInfo.Renewable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.Backends.Authentication.Models.Token.CallingTokenInfo"/> is renewable.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.Token.TokenAccessorInfo">
            <summary>
            Represents the information associated with a token accessor.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenAccessorInfo.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenAccessorInfo.CreationTimeToLive">
            <summary>
            Gets or sets the creation time to live.
            </summary>
            <value>
            The creation time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenAccessorInfo.Orphan">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.Backends.Authentication.Models.Token.TokenAccessorInfo"/> is orphan.
            </summary>
            <value>
              <c>true</c> if orphan; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenAccessorInfo.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.Token.TokenAuthenticationInfo">
            <summary>
            Represents the login information for the Token Authentication backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenAuthenticationInfo.AuthenticationBackendType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenAuthenticationInfo.Token">
            <summary>
            Gets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.Token.TokenAuthenticationInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.Token.TokenAuthenticationInfo" /> class.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions">
            <summary>
            Represents the options to create a token.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions.CreateAsOrphan">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether to create the token as an orphan.
            Use this flag when you're calling with a non-root token.
            </summary>
            <value>
              <c>true</c> if [create as orphan]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions.RoleName">
            <summary>
            <para>[optional]</para>
            Gets or sets the name of the role.
            The token will be created against the specified role name; 
            this may override options set during this call.
            </summary>
            <value>
            The name of the role.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions.NoParent">
            <summary>
            <para>[optional]</para>
            Gets or sets a value, such that when true and set by a root caller, the token will not have the parent token of the caller. 
            This creates a token with no parent.
            Use this flag when you want to create an orphaned token when calling with a root token.
            </summary>
            <value>
              <c>true</c> if [no parent]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions.NoDefaultPolicy">
            <summary>
            <para>[optional]</para>
            Gets or sets a value such that when true, the default policy will not be a part of this token's policy set.
            </summary>
            <value>
              <c>true</c> if [no default policy]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions.Renewable">
            <summary>
            <para>[optional]</para>
            Set to false to disable the ability of the token to be renewed past its initial TTL. 
            Specifying true, or omitting this option, will allow the token to be renewable up to the system/mount maximum TTL.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions.Lease">
            <summary>
            <para>[optional]</para>
            DEPRECATED. Use <see cref="P:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions.TimeToLive" />.
            </summary>
            <value>
            The lease time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the lease time to live period of the token, provided as "1h", where hour is the largest suffix. 
            If not provided, the token is valid for the default lease TTL, or indefinitely if the root policy is used..
            </summary>
            <value>
            The lease time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions.ExplicitMaximumTimeToLive">
            <summary>
            <para>[optional]</para>
            If set, the token will have an explicit max TTL set upon it. 
            This maximum token TTL cannot be changed later, and unlike with normal tokens, 
            updates to the system/mount max TTL value will have no effect at 
            renewal time -- the token will never be able to be renewed or used past the value set at issue time.
            </summary>
            <value>
            The explicit maximum time to live.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.Token.TokenCreationOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.Token.TokenInfo">
            <summary>
            Represents the information associated with a token.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenInfo.Id">
            <summary>
            <para>[optional]</para>
            Gets or sets the ID of the client token. Can only be specified by a root token. 
            Otherwise, the token ID is a randomly generated UUID.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenInfo.Policies">
            <summary>
            <para>[optional]</para>
            Gets or sets a list of policies for the token. 
            This must be a subset of the policies belonging to the token making the request, unless root. 
            If not specified, defaults to all the policies of the calling token.
            </summary>
            <value>
            The policies.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenInfo.Metadata">
            <summary>
            <para>[optional]</para>
            Gets or sets a map of string to string valued metadata. 
            This is passed through to the audit backends.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenInfo.CreatedByPath">
            <summary>
            Gets or sets the path used to create the token in the first place.
            </summary>
            <value>
            The created by path.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenInfo.DisplayName">
            <summary>
            <para>[optional]</para>
            Gets or sets the display name of the token. 
            Defaults to "token".
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenInfo.MaximumUsageCount">
            <summary>
            <para>[optional]</para>
            Gets or sets the maximum uses for the given token. 
            This can be used to create a one-time-token or limited use token. 
            Defaults to 0, which has no limit to number of uses.
            </summary>
            <value>
            The maximum usage count.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase">
            <summary>
            Represents the information associated with a token role.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase.RoleName">
            <summary>
            Gets or sets the name of the role.
            </summary>
            <value>
            The name of the role.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase.Orphan">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.Backends.Authentication.Models.Token.TokenRoleInfo"/> is orphan.
            If true, tokens created against this policy will be orphan tokens 
            (they will have no parent). As such, they will not be automatically revoked 
            by the revocation of any other token.
            </summary>
            <value>
              <c>true</c> if orphan; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase.PeriodSeconds">
            <summary>
            <para>[optional]</para>
            Gets or sets the period seconds.
            If set, tokens created against this role will not have a maximum lifetime. 
            Instead, they will have a fixed TTL that is refreshed with each renewal. 
            So long as they continue to be renewed, they will never expire. 
            The parameter is an integer duration of seconds. 
            Tokens issued track updates to the role value; the new period takes effect upon next renew. 
            This cannot be used in conjunction with <see cref="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase.ExplicitMaximumTimeToLive" />        
            </summary>
            <value>
            The period seconds.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase.Renewable">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.Backends.Authentication.Models.Token.TokenRoleInfo"/> is renewable.
            Set to false to disable the ability of token created against this role to be renewed 
            past their initial TTL. Defaults to true, which allows tokens to be renewed up 
            to the <see cref="M:VaultSharp.IVaultClient.TuneAuthenticationBackendConfigurationAsync(System.String,VaultSharp.Backends.System.Models.MountConfiguration)"/> maximum TimeToLive.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase.PathSuffix">
            <summary>
            <para>[optional]</para>
            Gets or sets the path suffix.
            If set, tokens created against this role will have the given suffix as part of 
            their path in addition to the role name. 
            This can be useful in certain scenarios, such as keeping the same role name 
            in the future but revoking all tokens created against it before some 
            point in time. The suffix can be changed, allowing new callers to have the 
            new suffix as part of their path, and then tokens with the old suffix 
            can be revoked via <see cref="M:VaultSharp.IVaultClient.RevokeAllSecretsOrTokensUnderPrefixAsync(System.String)"/>.
            </summary>
            <value>
            The path suffix.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase.ExplicitMaximumTimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the explicit maximum time to live.
            If set, tokens created with this role have an explicit max TTL set upon them. 
            This maximum token TTL cannot be changed later, and unlike with normal tokens, 
            updates to the role or the <see cref="M:VaultSharp.IVaultClient.TuneAuthenticationBackendConfigurationAsync(System.String,VaultSharp.Backends.System.Models.MountConfiguration)"/> maximum TimeToLive value will have no effect at 
            renewal time -- the token will never be able to be renewed or used past 
            the value set at issue time. This cannot be used in conjunction with <see cref="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase.PeriodSeconds"/>.
            </summary>
            <value>
            The explicit maximum time to live.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.Token.TokenRoleBase"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.Token.TokenRoleDefinition">
            <summary>
            Represents the information associated with a token role definition.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleDefinition.AllowedPolicies">
            <summary>
            <para>[optional]</para>
            Gets or sets the allowed policies.
            If set, tokens can be created with any subset of the policies in this list, 
            rather than the normal semantics of tokens being a subset of the calling token's policies. 
            The parameter is a comma-delimited string of policy names.
            If this and <see cref="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleDefinition.DisallowedPolicies"/> are both set, only this option takes effect.
            </summary>
            <value>
            The allowed policies.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleDefinition.DisallowedPolicies">
            <summary>
            <para>[optional]</para>
            Gets or sets the disallowed policies.
            If set, successful token creation via this role will require that no policies in 
            the given list are requested. If both this and <see cref="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleDefinition.AllowedPolicies"/> are set, 
            this option has no effect.
            The parameter is a comma-delimited string of policy names.
            </summary>
            <value>
            The disallowed policies.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.Token.TokenRoleInfo">
            <summary>
            Represents the information associated with a token role.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleInfo.AllowedPolicies">
            <summary>
            <para>[optional]</para>
            Gets or sets the allowed policies.
            If set, tokens can be created with any subset of the policies in this list, 
            rather than the normal semantics of tokens being a subset of the calling token's policies. 
            If this and <see cref="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleInfo.DisallowedPolicies"/> are both set, only this option takes effect.
            </summary>
            <value>
            The allowed policies.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleInfo.DisallowedPolicies">
            <summary>
            <para>[optional]</para>
            Gets or sets the disallowed policies.
            If set, successful token creation via this role will require that no policies in 
            the given list are requested. If both this and <see cref="P:VaultSharp.Backends.Authentication.Models.Token.TokenRoleInfo.AllowedPolicies"/> are set, 
            this option has no effect.
            </summary>
            <value>
            The disallowed policies.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo">
            <summary>
            Represents the login information for the UsernamePassword Authentication backend.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo.DefaultPath">
            <summary>
            The default path
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo.AuthenticationBackendType">
            <summary>
            Gets the type of the authentication backend.
            </summary>
            <value>
            The type of the authentication backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo.MountPoint">
            <summary>
            Gets the mount point.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo.Username">
            <summary>
            Gets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo.MultiFactorPasscode">
            <summary>
            Gets the multi factor passcode.
            </summary>
            <value>
            The multi factor passcode.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo.MultiFactorMethod">
            <summary>
            Gets the multi factor method.
            </summary>
            <value>
            The multi factor method.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo"/> class.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Authentication.Models.UsernamePassword.UsernamePasswordAuthenticationInfo"/> class.
            </summary>
            <param name="mountPoint">The mount point.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="multiFactorPasscode">The multi factor passcode.</param>
            <param name="multiFactorMethod">The multi factor method.</param>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.CredentialLeaseSettings">
            <summary>
            Represents the lease settings for the dynamic credentials generated for a backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.CredentialLeaseSettings.LeaseTime">
            <summary>
            <para>[required]</para>
            Gets or sets the duration of the lease provided as a string duration with time suffix. Hour is the largest suffix..
            </summary>
            <value>
            The duration of the lease.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.CredentialLeaseSettings.MaximumLeaseTime">
            <summary>
            <para>[required]</para>
            Gets or sets the maximum lease value provided as a string duration with time suffix. Hour is the largest suffix.
            </summary>
            <value>
            The maximum duration of the lease.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.CredentialTimeToLiveSettings">
            <summary>
            Represents the TTL settings for the dynamic credentials generated for a backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.CredentialTimeToLiveSettings.TimeToLive">
            <summary>
            <para>[required]</para>
            Gets or sets the duration of the lease provided as a string duration with time suffix. Hour is the largest suffix..
            </summary>
            <value>
            The duration of the lease.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.CredentialTimeToLiveSettings.MaximumTimeToLive">
            <summary>
            <para>[required]</para>
            Gets or sets the maximum lease value provided as a string duration with time suffix. Hour is the largest suffix.
            </summary>
            <value>
            The maximum duration of the lease.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.CredentialTimeToLiveSettings.LegacyMaximumTimeToLive">
            <summary>
            This field is deprecated and will be removed in a future release. 
            Use <see cref="P:VaultSharp.Backends.Secret.Models.CredentialTimeToLiveSettings.MaximumTimeToLive"/> instead."
            </summary>
            <value>
            The maximum duration of the lease.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.ListInfo">
            <summary>
            Represents the list of keys.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.ListInfo.Keys">
            <summary>
            Gets or sets the keys.
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SecretBackend">
            <summary>
            Represents a secret backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackend.MountPoint">
            <summary>
            Gets or sets the mount point. If not set, the value will default to the <see cref="P:VaultSharp.Backends.Secret.Models.SecretBackend.BackendType"/> value.
            Presence or absence of leading or trailing slashes don't matter.
            </summary>
            <value>
            The mount point.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackend.BackendType">
            <summary>
            Gets or sets the type of the backend.
            </summary>
            <value>
            The type of the backend.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackend.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackend.MountConfiguration">
            <summary>
            Gets or sets the mount configuration.
            </summary>
            <value>
            The mount configuration.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SecretBackendType">
            <summary>
            A helper class for retrieving and comparing Secret Backend types.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.SystemType">
            <summary>
            The system type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.AWSType">
            <summary>
            The aws type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.CassandraType">
            <summary>
            The cassandra type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.ConsulType">
            <summary>
            The consul type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.CubbyHoleType">
            <summary>
            The cubby hole type.
            It is mounted at the cubbyhole/ prefix by default and cannot be mounted elsewhere or removed.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.GenericType">
            <summary>
            The generic type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDbType">
            <summary>
            MongoDb type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.MicrosoftSqlType">
            <summary>
            Microsoft SQL type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.MySqlType">
            <summary>
            My SQL type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.PKIType">
            <summary>
            The pki type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSqlType">
            <summary>
            The postgre SQL type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.RabbitMQType">
            <summary>
            The rabbit mq type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.SSHType">
            <summary>
            The SSH type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType.TransitType">
            <summary>
            The transit type
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SecretBackendType._type">
            <summary>
            The _type
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.System">
            <summary>
            Gets the system type.
            </summary>
            <value>
            The system.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.AWS">
            <summary>
            Gets the aws type.
            </summary>
            <value>
            The aws.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Cassandra">
            <summary>
            Gets the cassandra type.
            </summary>
            <value>
            The cassandra.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Consul">
            <summary>
            Gets the consul type.
            </summary>
            <value>
            The consul.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.CubbyHole">
            <summary>
            Gets the cubby hole type.
            </summary>
            <value>
            The cubby hole.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Generic">
            <summary>
            Gets the generic type.
            </summary>
            <value>
            The generic.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MongoDb">
            <summary>
            Gets the mongo database.
            </summary>
            <value>
            The mongo database.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MicrosoftSql">
            <summary>
            Gets the Microsoft Sql type.
            </summary>
            <value>
            Microsoft Sql.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.MySql">
            <summary>
            Gets the MySql type.
            </summary>
            <value>
            My SQL.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PKI">
            <summary>
            Gets the pki type.
            </summary>
            <value>
            The pki.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.PostgreSql">
            <summary>
            Gets the postgre SQL type.
            </summary>
            <value>
            The postgre SQL.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.RabbitMQ">
            <summary>
            Gets the rabbit mq type.
            </summary>
            <value>
            The rabbit mq.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.SSH">
            <summary>
            Gets the SSH type.
            </summary>
            <value>
            The SSH.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Transit">
            <summary>
            Gets the transit type.
            </summary>
            <value>
            The transit.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SecretBackendType.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.SecretBackendType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.SecretBackendType"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.SecretBackendType.op_Equality(VaultSharp.Backends.Secret.Models.SecretBackendType,VaultSharp.Backends.Secret.Models.SecretBackendType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.SecretBackendType.op_Inequality(VaultSharp.Backends.Secret.Models.SecretBackendType,VaultSharp.Backends.Secret.Models.SecretBackendType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.SecretBackendType.Equals(VaultSharp.Backends.Secret.Models.SecretBackendType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.SecretBackendType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.SecretBackendType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.SecretBackendType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.UsernamePasswordCredentials">
            <summary>
            Represents credentials with a username and password.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.UsernamePasswordCredentials.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.UsernamePasswordCredentials.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.AWS.AWSCredentials">
            <summary>
            Represents the AWS credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.AWS.AWSCredentials.AccessKey">
            <summary>
            Gets or sets the access key.
            </summary>
            <value>
            The access key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.AWS.AWSCredentials.SecretKey">
            <summary>
            Gets or sets the secret key.
            </summary>
            <value>
            The secret key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.AWS.AWSCredentials.SecurityToken">
            <summary>
            Gets or sets the STS token.
            </summary>
            <value>
            The secret token.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.AWS.AWSRoleDefinition">
            <summary>
            Represents the AWS role definition with an IAM policy.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.AWS.AWSRoleDefinition.PolicyText">
            <summary>
            Gets or sets the IAM policy as a JSON string.
            </summary>
            <value>
            The policy.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.AWS.AWSRoleDefinition.ARN">
            <summary>
            Gets or sets the full ARN reference to the desired existing policy.
            </summary>
            <value>
            The policy arn.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.AWS.AWSRootCredentials">
            <summary>
            Represents the AWS Root credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.AWS.AWSRootCredentials.AccessKey">
            <summary>
            <para>[required]</para>
            Gets or sets the access key.
            </summary>
            <value>
            The access key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.AWS.AWSRootCredentials.SecretKey">
            <summary>
            <para>[required]</para>
            Gets or sets the secret key.
            </summary>
            <value>
            The secret key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.AWS.AWSRootCredentials.Region">
            <summary>
            <para>[required]</para>
            Gets or sets the region.
            </summary>
            <value>
            The region.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo">
            <summary>
            Represents the Cassandra connection information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.Hosts">
            <summary>
            <para>[required]</para>
            Gets or sets a set of comma-delimited Cassandra hosts to connect to.
            </summary>
            <value>
            The hosts.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.Username">
            <summary>
            <para>[required]</para>
            Gets or sets the username to use for superuser access.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.Password">
            <summary>
            <para>[required]</para>
            Gets or sets the password corresponding to the given username.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.UseTLS">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether to use TLS when connecting to Cassandra.
             If set to true, the connection will use TLS; 
            this happens automatically if <see cref="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.PemBundle"/>, <see cref="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.PemJson"/>, or <see cref="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.InsecureTLS"/> is set.
            </summary>
            <value>
              <c>true</c> if [use TLS]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.InsecureTLS">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether to skip verification of the server certificate when using TLS.
            The connection will not perform verification of the server certificate; 
            If this needs to be true, also set <see cref="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.UseTLS"/> to true.
            </summary>
            <value>
              <c>true</c> if [use insecure TLS]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.PemBundle">
            <summary>
            <para>[optional]</para>
            Gets or sets the concatenated PEM blocks containing a certificate and private key; 
            a certificate, private key, and issuing CA certificate; or just a CA certificate.
            Should be a PEM-concatenated bundle of a private key + client certificate, an issuing CA certificate, or both. 
            <para>
            If the only certificate in <see cref="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.PemBundle"/> is a CA certificate, 
            the given CA certificate will be used for server certificate verification; otherwise the system CA certificates will be used.
            If certificate and private_key are set in <see cref="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.PemBundle"/>, client auth will be turned on for the connection.
            </para>
            </summary>
            <value>
            The pem bundle.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.PemJson">
            <summary>
            <para>[optional]</para>
            Gets or sets the pem JSON containing a certificate and private key; 
            a certificate, private key, and issuing CA certificate; or just a CA certificate.
            Should be a PEM-concatenated bundle of a private key + client certificate, an issuing CA certificate, or both. 
            <para>
            If only issuing_ca is set in <see cref="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.PemJson"/> the given CA certificate will be used for server certificate verification; 
            otherwise the system CA certificates will be used.
            If certificate and private_key are set in <see cref="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.PemJson"/>, client auth will be turned on for the connection.
            </para>
            </summary>
            <value>
            The pem json.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.CqlProtocolVersion">
            <summary>
            <para>[optional]</para>
            Gets or sets the CQL protocol version.
            Defaults to <value>true</value>.
            </summary>
            <value>
            The CQL protocol version.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.ConnectionTimeoutSeconds">
            <summary>
            <para>[optional]</para>
            Gets or sets connection timeout to use. 
            Defaults to 5 seconds.
            </summary>
            <value>
            The connection timeout.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.Cassandra.CassandraConnectionInfo"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Cassandra.CassandraRoleDefinition">
            <summary>
            Represents the Cassandra role definition with the creation, rollback query and lease information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraRoleDefinition.CreationCql">
            <summary>
            <para>[optional]</para>
            Gets or sets the CQL statements executed to create and configure the new user. 
            Must be semi-colon separated string, a base64-encoded semicolon-separated string, 
            a serialized JSON string array, or a base64-encoded serialized JSON string array.
            The '{{username}}' and '{{password}}' values will be substituted; 
            it is required that these parameters are in single quotes. 
            The default creates a non-superuser user with no authorization grants.
            </summary>
            <value>
            The creation CQL.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraRoleDefinition.RollbackCql">
            <summary>
            <para>[optional]</para>
            Gets or sets the CQL statements executed to attempt a rollback if an error is encountered during user creation. 
            The default is to delete the user. Must be semi-colon separated string, a base64-encoded semicolon-separated string, 
            a serialized JSON string array, or a base64-encoded serialized JSON string array.
            The '{{username}}' and '{{password}}' values will be substituted; 
            it is required that these parameters are in single quotes.
            </summary>
            <value>
            The rollback CQL.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraRoleDefinition.LeaseDuration">
            <summary>
            <para>[optional]</para>
            Gets or sets the lease value provided as a string duration with time suffix. 
            Hour is the largest suffix.
            </summary>
            <value>
            The duration of the lease.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Cassandra.CassandraRoleDefinition.ConsistencyLevel">
            <summary>
            Gets or sets the consistency level.
            The consistency level value provided as a string. 
            Determines the consistency level used for operations performed on the Cassandra database. 
            Defaults to a consistency level of Quorum.
            </summary>
            <value>
            The consistency level.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.Cassandra.CassandraRoleDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.Cassandra.CassandraRoleDefinition"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Consul.ConsulAccessInfo">
            <summary>
            Represents the Consul access information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Consul.ConsulAccessInfo.AddressWithPort">
            <summary>
            <para>[required]</para>
            Gets or sets the address of the Consul instance, provided as host:port
            </summary>
            <value>
            The address with port.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Consul.ConsulAccessInfo.UriScheme">
            <summary>
            <para>[optional]</para>
            Gets or sets the URL scheme to use. 
            Defaults to HTTP, as Consul does not expose HTTPS by default.
            </summary>
            <value>
            The URI scheme.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Consul.ConsulAccessInfo.ManagementToken">
            <summary>
            <para>[required]</para>
            Gets or sets the Consul ACL token to use. 
            Must be a management type token.
            </summary>
            <value>
            The management token.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.Consul.ConsulAccessInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.Consul.ConsulAccessInfo"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Consul.ConsulCredentials">
            <summary>
            Represents the Consul credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Consul.ConsulCredentials.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Consul.ConsulRoleDefinition">
            <summary>
            Represents the Consul role definition with the policy and token information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Consul.ConsulRoleDefinition.Base64EncodedPolicy">
            <summary>
            <para>[required] for a <see cref="F:VaultSharp.Backends.Secret.Models.Consul.ConsulTokenType.client"/> token. otherwise [optional].</para>
            Gets or sets the base64 encoded Consul ACL policy.
            </summary>
            <value>
            The policy.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Consul.ConsulRoleDefinition.TokenType">
            <summary>
            Gets or sets the type of token to create using this role.
            </summary>
            <value>
            The type of the token.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Consul.ConsulRoleDefinition.LeaseDuration">
            <summary>
            <para>[optional]</para>
            Gets or sets the duration of the lease value provided as a string duration with time suffix. 
            Hour is the largest suffix..
            </summary>
            <value>
            The duration of the lease.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Consul.ConsulTokenType">
            <summary>
            Represents the token type for Consul.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.Consul.ConsulTokenType.client">
            <summary>
            The client
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.Consul.ConsulTokenType.management">
            <summary>
            The management
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlConnectionInfo">
            <summary>
            Represents the Microsoft Sql connection information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlConnectionInfo.ConnectionString">
            <summary>
            <para>[required]</para>
            Gets or sets the connection DSN used to communicate with Sql Server.
            </summary>
            <value>
            The MSSQL DSN
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlConnectionInfo.MaximumOpenConnections">
            <summary>
            <para>[optional]</para>
            Gets or sets the maximum number of open connections to the database. 
            Defaults to 2.
            </summary>
            <value>
            The maximum open connections.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlConnectionInfo.VerifyConnection">
            <summary>
            <para>[optional]</para>
            Gets or sets a flag which when set verifies the <see cref="P:VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlConnectionInfo.ConnectionString"/> by 
            actually connecting to the database. 
            Defaults to true.
            </summary>
            <value>
            A flag to verify the connection.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlConnectionInfo" /> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlRoleDefinition">
            <summary>
            Represents the Microsoft Sql role definition
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MicrosoftSql.MicrosoftSqlRoleDefinition.Sql">
            <summary>
            <para>[required]</para>
            Gets or sets the SQL statements executed to create and configure the role. 
            Must be semi-colon separated string, a base64-encoded semicolon-separated string, 
            a serialized JSON string array, or a base64-encoded serialized JSON string array.
            The '{{name}}' and '{{password}}' values will be substituted.
            </summary>
            <value>
            The SQL.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbConnectionInfo">
            <summary>
            Represents the MongoDb connection information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbConnectionInfo.ConnectionStringUri">
            <summary>
            <para>[required]</para>
            Gets or sets the standard connection string (URI) used to communicate with MongoDB.
            </summary>
            <value>
            The Connection String Uri
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbConnectionInfo.VerifyConnection">
            <summary>
            <para>[optional]</para>
            Gets or sets a flag which when set verifies the <see cref="P:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbConnectionInfo.ConnectionStringUri"/> by 
            actually connecting to the database. 
            Defaults to true.
            </summary>
            <value>
            A flag to verify the connection.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbConnectionInfo" /> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbRoleDefinition">
            <summary>
            Represents the MongoDb role definition
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbRoleDefinition.Database">
            <summary>
            <para>[required]</para>
            Gets or sets name of the database users should be created in for this role.
            </summary>
            <value>
            The database name.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbRoleDefinition.Roles">
            <summary>
            <para>[required]</para>
            Gets or sets the MongoDb roles. You specify both built-in roles and user-defined roles 
            for both the database the user is created in and for other databases.
            e.g. Roles = JsonConvert.SerializeObject(new object[] { "readWrite", new { role = "read", db = "bar" } }) 
            Vault will create a user with the 'readWrite' built-in role on the requested database 
            and the read built-in role on the 'bar' database.
            </summary>
            <value>
            The roles.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbUsernamePasswordCredentials">
            <summary>
            Represents MongoDb credentials with a username and password.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MongoDb.MongoDbUsernamePasswordCredentials.Database">
            <summary>
            Gets or sets name of the database the credentials apply to.
            </summary>
            <value>
            The database name.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo">
            <summary>
            Represents the MySql connection information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo.ConnectionUrl">
            <summary>
            <para>[required]</para>
            Gets or sets the name of the data source, the DSN.
            </summary>
            <value>
            The name of the data source.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo.Value">
            <summary>
            <para>[optional]</para>
            Gets or sets the value of the data source.
            Deprecated, please use <see cref="P:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo.ConnectionUrl"/>
            </summary>
            <value>
            The value of the data source.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo.MaximumOpenConnections">
            <summary>
            <para>[optional]</para>
            Gets or sets the maximum number of open connections to the database. 
            Defaults to 2.
            </summary>
            <value>
            The maximum open connections.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo.MaximumIdleConnections">
            <summary>
            <para>[optional]</para>
            Gets or sets the Maximum number of idle connections to the database. 
            A zero uses the value of <see cref="P:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo.MaximumOpenConnections"/> and a negative value disables idle connections. 
            If larger than <see cref="P:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo.MaximumOpenConnections"/> it will be reduced to be equal.
            </summary>
            <value>
            The maximum idle connections.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo.VerifyConnection">
            <summary>
            <para>[optional]</para>
            Gets or sets a flag which when set verifies the <see cref="P:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo.ConnectionUrl"/> by 
            actually connecting to the database. 
            Defaults to true.
            </summary>
            <value>
            A flag to verify the connection.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.MySql.MySqlConnectionInfo" /> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.MySql.MySqlRoleDefinition">
            <summary>
            Represents the MySql role definition
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MySql.MySqlRoleDefinition.Sql">
            <summary>
            <para>[required]</para>
            Gets or sets the SQL statements executed to create and configure the role. 
            Must be semi-colon separated string, a base64-encoded semicolon-separated string, 
            a serialized JSON string array, or a base64-encoded serialized JSON string array.
            The '{{name}}' and '{{password}}' values will be substituted.
            </summary>
            <value>
            The SQL.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MySql.MySqlRoleDefinition.RevocationSql">
            <summary>
            <para>[optional]</para>
            Gets or sets the SQL statements executed to revoke a user. 
            Must be a semicolon-separated string, a base64-encoded semicolon-separated string, 
            a serialized JSON string array, or a base64-encoded serialized JSON string array. 
            The '{{name}}' value will be substituted.
            </summary>
            <value>
            The revocation SQL.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MySql.MySqlRoleDefinition.RoleNameLength">
            <summary>
            Gets or sets a value determining how many characters from the role name will be used to form the mysql 
            username interpolated into the '{{name}}' field of the sql parameter. 
            The default is 4.
            </summary>
            <value>
            The length of the role name.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MySql.MySqlRoleDefinition.DisplayNameLength">
            <summary>
            Gets or sets a value determining how many characters from the token display name will be used to form the mysql 
            username interpolated into the '{{name}}' field of the sql parameter. 
            The default is 4.
            </summary>
            <value>
            The length of the role name.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.MySql.MySqlRoleDefinition.UserNameLength">
            <summary>
            Gets or sets a value determining the maximum total length in characters of the mysql username 
            interpolated into the '{{name}}' field of the sql parameter. 
            The default is 16.
            </summary>
            <value>
            The length of the role name.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.MySql.MySqlRoleDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.MySql.MySqlRoleDefinition"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentials">
            <summary>
            Represents the generated Certificate credentials.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentials.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
            <value>
            The private key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentials.PrivateKeyType">
            <summary>
            Gets or sets the type of the private key.
            </summary>
            <value>
            The type of the private key.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentialsRequestOptions">
            <summary>
            Represents the Certificate credentials request options.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentialsRequestOptions.CommonName">
            <summary>
            <para>[required]</para>
            Gets or sets the requested CN for the certificate. 
            If the CN is allowed by role policy, it will be issued.
            </summary>
            <value>
            The name of the common.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentialsRequestOptions.SubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested Subject Alternative Names, in a comma-delimited list. 
            These can be host names or email addresses; they will be parsed into their respective fields. 
            If any requested names do not match role policy, the entire request will be denied.
            </summary>
            <value>
            The subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentialsRequestOptions.IPSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested IP Subject Alternative Names, in a comma-delimited list. 
            Only valid if the role allows IP SANs (which is the default).
            </summary>
            <value>
            The ip subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentialsRequestOptions.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested Time To Live. 
            Cannot be greater than the role's max_ttl value. 
            If not provided, the role's ttl value will be used. 
            Note that the role values default to system values if not explicitly set.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentialsRequestOptions.CertificateFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets the certificate format for returned data. 
            Can be pem or der; defaults to pem. 
            If der, the output is base64 encoded..
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentialsRequestOptions.ExcludeCommonNameFromSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [exclude common name from subject alternative names].
            If set, the given common name will not be included in DNS or Email Subject Alternate Names (as appropriate). 
            Useful if the CN is not a hostname or email address, but is instead some human-readable identifier.
            </summary>
            <value>
            <c>true</c> if [exclude common name from subject alternative names]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentialsRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.PKI.CertificateCredentialsRequestOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.CertificateData">
            <summary>
            Represents the generated Certificate.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateData.CertificateFormat">
            <summary>
            Gets or sets the certificate format.
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateData.CertificateContent">
            <summary>
            Gets or sets the content of the certificate.
            </summary>
            <value>
            The content of the certificate.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateData.IssuingCACertificateContent">
            <summary>
            Gets or sets the content of the issuing ca certificate.
            </summary>
            <value>
            The content of the issuing ca certificate.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateData.SerialNumber">
            <summary>
            Gets or sets the serial number.
            </summary>
            <value>
            The serial number.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointData">
            <summary>
            Represents the URLs encoded in the generated certificates.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointData.IssuingCertificateEndpoints">
            <summary>
            Gets or sets the issuing certificate endpoints.
            </summary>
            <value>
            The issuing certificate endpoints.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointData.CRLDistributionPointEndpoints">
            <summary>
            Gets or sets the CRL distribution point endpoints.
            </summary>
            <value>
            The CRL distribution point endpoints.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointData.OCSPServerEndpoints">
            <summary>
            Gets or sets the ocsp server endpoints.
            </summary>
            <value>
            The ocsp server endpoints.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointOptions">
            <summary>
            Represents the URLs encoded in the generated certificates.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointOptions.IssuingCertificateEndpoints">
            <summary>
            Gets or sets the issuing certificate endpoints.
            </summary>
            <value>
            The issuing certificate endpoints.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointOptions.CRLDistributionPointEndpoints">
            <summary>
            Gets or sets the CRL distribution point endpoints.
            </summary>
            <value>
            The CRL distribution point endpoints.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateEndpointOptions.OCSPServerEndpoints">
            <summary>
            Gets or sets the ocsp server endpoints.
            </summary>
            <value>
            The ocsp server endpoints.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.CertificateFormat">
            <summary>
            Represents the Certificate format.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.PKI.CertificateFormat.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.PKI.CertificateFormat.der">
            <summary>
            The DER Encoded format
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.PKI.CertificateFormat.pem">
            <summary>
            The PEM encoded format.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.CertificateKeyType">
            <summary>
            Represents the Certificate key type.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.PKI.CertificateKeyType.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.PKI.CertificateKeyType.rsa">
            <summary>
            The RSA Key type.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.PKI.CertificateKeyType.ec">
            <summary>
            The Elliptic Curve key type.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.CertificateRequestOptions">
            <summary>
            Represents the options for a certificate request.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRequestOptions.CommonName">
            <summary>
            <para>[required]</para>
            Gets or sets the requested CN for the certificate.
            </summary>
            <value>
            The name of the common.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRequestOptions.SubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested Subject Alternative Names, in a comma-delimited list. 
            These can be host names or email addresses; they will be parsed into their respective fields.
            </summary>
            <value>
            The subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRequestOptions.IPSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets the requested IP Subject Alternative Names, in a comma-delimited list.
            </summary>
            <value>
            The ip subject alternative names.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRequestOptions.CertificateFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets the certificate format for returned data.
            Can be pem or der; defaults to pem. If der, the output is base64 encoded.
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.PKI.CertificateRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.PKI.CertificateRequestOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition">
            <summary>
            Represents the Certificate role definition.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the Time To Live value provided as a string duration with time suffix. 
            Hour is the largest suffix. 
            If not set, uses the system default value or the value of <see cref="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.MaximumTimeToLive"/>, whichever is shorter.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.MaximumTimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the maximum Time To Live provided as a string duration with time suffix. 
            Hour is the largest suffix. 
            If not set, defaults to the system maximum lease TTL.
            </summary>
            <value>
            The maximum time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowLocalhost">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [allow localhost].
            If set, clients can request certificates for localhost as one of the requested common names. 
            This is useful for testing and to allow clients on a single host to talk securely. 
            Defaults to true.
            </summary>
            <value>
              <c>true</c> if [allow localhost]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowedDomains">
            <summary>
            <para>[optional]</para>
            Gets or sets the designated domains of the role, provided as a comma-separated list. 
            This is used with the <see cref="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowBareDomains"/> and <see cref="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowSubdomains"/> options. 
            There is no default.
            </summary>
            <value>
            The allowed domains.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowBareDomains">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [allow bare domains].
            If set, clients can request certificates matching the value of the actual domains themselves; 
            e.g. if a configured domain set with <see cref="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowedDomains"/> is example.com, 
            this allows clients to actually request a certificate containing the name example.com as one of the DNS values on the final certificate. 
            In some scenarios, this can be considered a security risk. 
            Defaults to false.
            </summary>
            <value>
              <c>true</c> if [allow bare domains]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowSubdomains">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [allow subdomains].
            If set, clients can request certificates with CNs that are subdomains of the CNs allowed by the other role options. 
            This includes wildcard subdomains. 
            For example, an <see cref="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowedDomains"/> value of example.com with this option set to true will allow foo.example.com and bar.example.com 
            as well as *.example.com. 
            This is redundant when using the <see cref="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowAnyName"/> option. 
            Defaults to false.
            </summary>
            <value>
              <c>true</c> if [allow subdomains]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowAnyName">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [allow any name].
            If set, clients can request any CN. 
            Useful in some circumstances, but make sure you understand whether it is appropriate for your installation before enabling it. 
            Defaults to false.
            </summary>
            <value>
              <c>true</c> if [allow any name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.EnforceHostnames">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [enforce hostnames].
            If set, only valid host names are allowed for CNs, DNS SANs, and the host part of email addresses. 
            Defaults to true.
            </summary>
            <value>
              <c>true</c> if [enforce hostnames]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.AllowIPSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [allow ip subject alternative names].
            If set, clients can request IP Subject Alternative Names. 
            No authorization checking is performed except to verify that the given values are valid IP addresses. 
            Defaults to true.
            </summary>
            <value>
            <c>true</c> if [allow ip subject alternative names]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.ServerFlag">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [server flag].
            If set, certificates are flagged for server use. 
            Defaults to true.
            </summary>
            <value>
              <c>true</c> if [server flag]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.ClientFlag">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [client flag].
            If set, certificates are flagged for client use. 
            Defaults to true.
            </summary>
            <value>
              <c>true</c> if [client flag]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.CodeSigningFlag">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [code signing flag].
            If set, certificates are flagged for code signing use. 
            Defaults to false.
            </summary>
            <value>
              <c>true</c> if [code signing flag]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.EmailProtectionFlag">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [email protection flag].
            If set, certificates are flagged for email protection use. 
            Defaults to false.
            </summary>
            <value>
              <c>true</c> if [email protection flag]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.KeyType">
            <summary>
            <para>[optional]</para>
            Gets or sets the type of key to generate for generated private keys. 
            Currently, rsa and ec are supported. 
            Defaults to rsa.
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.KeyBits">
            <summary>
            <para>[optional]</para>
            Gets or sets the number of bits to use for the generated keys. 
            Defaults to 2048; this will need to be changed for ec keys. 
            See https://golang.org/pkg/crypto/elliptic/#Curve for an overview of allowed bit lengths for ec.
            </summary>
            <value>
            The key bits.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.KeyUsage">
            <summary>
            Gets or sets the allowed key usage constraint on issued certificates. 
            This is a comma-separated string; valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage -- 
            simply drop the KeyUsage part of the value. 
            Values are not case-sensitive. To specify no key usage constraints, set this to an empty string. 
            Defaults to DigitalSignature,KeyAgreement,KeyEncipherment.
            </summary>
            <value>
            The key usage.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.UseCertificateSigningRequestCommonName">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [use certificate signing request common name].
            If set, when used with the CSR signing API, the common name in the CSR will be used instead of taken from the input data. 
            This does not include any requested SANs in the CSR. 
            Defaults to false.
            </summary>
            <value>
            <c>true</c> if [use certificate signing request common name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.PKI.CertificateRoleDefinition"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.CertificateSigningRequestOptions">
            <summary>
            Represents the options for a CSR.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateSigningRequestOptions.KeyType">
            <summary>
            <para>[optional]</para>
            Gets or sets the desired key type; must be rsa or ec. 
            Defaults to rsa.
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateSigningRequestOptions.KeyBits">
            <summary>
            <para>[optional]</para>
            Gets or sets the number of bits to use. 
            Defaults to 2048. 
            Must be changed to a valid value if the <see cref="T:VaultSharp.Backends.Secret.Models.PKI.CertificateKeyType"/> is ec.
            </summary>
            <value>
            The number of key bits.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateSigningRequestOptions.ExcludeCommonNameFromSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [exclude common name from subject alternative names].
            If set, the given common name will not be included in DNS or Email Subject Alternate Names (as appropriate). 
            Useful if the CN is not a hostname or email address, but is instead some human-readable identifier.
            </summary>
            <value>
            <c>true</c> if [exclude common name from subject alternative names]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.CertificateSigningRequestOptions.ExportPrivateKey">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [export private key].
            </summary>
            <value>
              <c>true</c> if [export private key]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.PKI.CertificateSigningRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.PKI.CertificateSigningRequestOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.ExpiryData">
            <summary>
            Represents the expiration data.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.ExpiryData.Expiry">
            <summary>
            Gets or sets the expiry.
            </summary>
            <value>
            The expiry.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.IntermediateCertificateData">
            <summary>
            Represents the generated intermediate Certificate.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.IntermediateCertificateRequestOptions">
            <summary>
            Represents the intermediate CA Certificate request options.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.IntermediateCertificateRequestOptions.PemEncodedCertificateSigningRequest">
            <summary>
            <para>[required]</para>
            Gets or sets the pem encoded certificate signing request.
            </summary>
            <value>
            The pem encoded certificate signing request.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.IntermediateCertificateRequestOptions.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the Time To Live (after which the certificate will be expired). 
            This cannot be larger than the mount max (or, if not set, the system max).
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.IntermediateCertificateRequestOptions.MaximumPathLength">
            <summary>
            <para>[optional]</para>
            Gets or sets the maximum length of the path.
            If set, the maximum path length to encode in the generated certificate. 
            Defaults to -1, which means no limit, unless the signing certificate has a maximum path length set, 
            in which case the path length is set to one less than that of the signing certificate. 
            A limit of 0 means a literal path length of zero.
            </summary>
            <value>
            The maximum length of the path.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.IntermediateCertificateRequestOptions.ExcludeCommonNameFromSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [exclude common name from subject alternative names].
            If set, the given common name will not be included in DNS or Email Subject Alternate Names (as appropriate). 
            Useful if the CN is not a hostname or email address, but is instead some human-readable identifier.
            </summary>
            <value>
            <c>true</c> if [exclude common name from subject alternative names]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.IntermediateCertificateRequestOptions.UseCertificateSigningRequestValues">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [use certificate signing request values].
            If set to true, then: 
            1) Subject information, including names and alternate names, will be preserved from the CSR 
            rather than using the values provided in the other parameters to this path; 
            2) Any key usages (for instance, non-repudiation) requested in the CSR will be added to the basic set of key 
            usages used for CA certs signed by this path; 
            3) Extensions requested in the CSR will be copied into the issued certificate.
            </summary>
            <value>
            <c>true</c> if [use certificate signing request values]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.PKI.IntermediateCertificateRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.PKI.IntermediateCertificateRequestOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.NewCertificateData">
            <summary>
            Represents a newly Certificate.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.NewCertificateSigningRequestOptions">
            <summary>
            Represents a new certificate signing request set of options.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.NewCertificateSigningRequestOptions.PemEncodedCertificateSigningRequest">
            <summary>
            <para>[required]</para>
            Gets or sets the pem encoded certificate signing request.
            </summary>
            <value>
            The pem encoded certificate signing request.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.NewCertificateSigningRequestOptions.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the Time To Live (after which the certificate will be expired). 
            This cannot be larger than the mount max (or, if not set, the system max).
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.NewCertificateSigningRequestOptions.ExcludeCommonNameFromSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [exclude common name from subject alternative names].
            If set, the given common name will not be included in DNS or Email Subject Alternate Names (as appropriate). 
            Useful if the CN is not a hostname or email address, but is instead some human-readable identifier.
            </summary>
            <value>
            <c>true</c> if [exclude common name from subject alternative names]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.RawCertificateData">
            <summary>
            Represents the raw certificate contents.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RawCertificateData.CertificateContent">
            <summary>
            Gets or sets the content of the certificate.
            </summary>
            <value>
            The content of the certificate.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RawCertificateData.RevocationTime">
            <summary>
            Gets or sets the revocation time.
            </summary>
            <value>
            The revocation time.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RawCertificateData.EncodedCertificateFormat">
            <summary>
            Gets or sets the encoded certificate format.
            </summary>
            <value>
            The encoded certificate format.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.RawCertificateSigningRequestData">
            <summary>
            Represents the raw CSR.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RawCertificateSigningRequestData.EncodedCertificateFormat">
            <summary>
            Gets or sets the encoded certificate format.
            </summary>
            <value>
            The encoded certificate format.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RawCertificateSigningRequestData.RawCertificateSigningRequest">
            <summary>
            Gets or sets the raw certificate signing request.
            </summary>
            <value>
            The raw certificate signing request.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RawCertificateSigningRequestData.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
            <value>
            The private key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RawCertificateSigningRequestData.PrivateKeyType">
            <summary>
            Gets or sets the type of the private key.
            </summary>
            <value>
            The type of the private key.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.RevocationData">
            <summary>
            Represents the Revocation data.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RevocationData.RevocationTime">
            <summary>
            Gets or sets the revocation time.
            </summary>
            <value>
            The revocation time.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.RootCertificateData">
            <summary>
            Represents the generated root Certificate.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RootCertificateData.PrivateKey">
            <summary>
            Gets or sets the private key.
            </summary>
            <value>
            The private key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RootCertificateData.PrivateKeyType">
            <summary>
            Gets or sets the type of the private key.
            </summary>
            <value>
            The type of the private key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RootCertificateData.Expiration">
            <summary>
            Gets or sets the expiration.
            </summary>
            <value>
            The expiration.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.RootCertificateRequestOptions">
            <summary>
            Represents the root CA Certificate request options.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RootCertificateRequestOptions.KeyType">
            <summary>
            <para>[optional]</para>
            Gets or sets the desired key type; must be rsa or ec. 
            Defaults to rsa.
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RootCertificateRequestOptions.KeyBits">
            <summary>
            <para>[optional]</para>
            Gets or sets the number of bits to use. 
            Defaults to 2048. 
            Must be changed to a valid value if the <see cref="T:VaultSharp.Backends.Secret.Models.PKI.CertificateKeyType"/> is ec.
            </summary>
            <value>
            The number of key bits.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RootCertificateRequestOptions.ExportPrivateKey">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [export private key].
            </summary>
            <value>
              <c>true</c> if [export private key]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RootCertificateRequestOptions.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the Time To Live (after which the certificate will be expired). 
            This cannot be larger than the mount max (or, if not set, the system max).
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RootCertificateRequestOptions.MaximumPathLength">
            <summary>
            <para>[optional]</para>
            Gets or sets the maximum length of the path.
            If set, the maximum path length to encode in the generated certificate. 
            Defaults to -1, which means no limit, unless the signing certificate has a maximum path length set, 
            in which case the path length is set to one less than that of the signing certificate. 
            A limit of 0 means a literal path length of zero.
            </summary>
            <value>
            The maximum length of the path.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.RootCertificateRequestOptions.ExcludeCommonNameFromSubjectAlternativeNames">
            <summary>
            <para>[optional]</para>
            Gets or sets a value indicating whether [exclude common name from subject alternative names].
            If set, the given common name will not be included in DNS or Email Subject Alternate Names (as appropriate). 
            Useful if the CN is not a hostname or email address, but is instead some human-readable identifier.
            </summary>
            <value>
            <c>true</c> if [exclude common name from subject alternative names]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.PKI.RootCertificateRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.PKI.RootCertificateRequestOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.TidyRequestOptions">
            <summary>
            Represents the options for tidying up the PKI backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.TidyRequestOptions.TidyUpCertificateStore">
            <summary>
            <para>[optional]</para>
            Whether to tidy up the certificate store. Defaults to false.
            </summary>
            <value>
            The flag.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.TidyRequestOptions.TidyUpRevocationList">
            <summary>
            <para>[optional]</para>
            Whether to tidy up the revocation list (CRL). Defaults to false.
            </summary>
            <value>
            The flag.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.TidyRequestOptions.SafetyBufferDuration">
            <summary>
            <para>[optional]</para>
             A duration (given as an integer number of seconds or a string; defaults to 72h) used as a safety 
            buffer to ensure certificates are not expunged prematurely; 
            as an example, this can keep certificates from being removed from the CRL that, 
            due to clock skew, might still be considered valid on other hosts. 
            For a certificate to be expunged, the time must be after the expiration 
            time of the certificate (according to the local clock) plus the duration of <see cref="P:VaultSharp.Backends.Secret.Models.PKI.TidyRequestOptions.SafetyBufferDuration"/>.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.PKI.TidyRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.PKI.TidyRequestOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PKI.VerbatimCertificateSigningRequestOptions">
            <summary>
            Represents a verbatim certificate signing request set of options.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.VerbatimCertificateSigningRequestOptions.PemEncodedCertificateSigningRequest">
            <summary>
            <para>[required]</para>
            Gets or sets the pem encoded certificate signing request.
            </summary>
            <value>
            The pem encoded certificate signing request.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.VerbatimCertificateSigningRequestOptions.TimeToLive">
            <summary>
            <para>[optional]</para>
            Gets or sets the Time To Live (after which the certificate will be expired). 
            This cannot be larger than the mount max (or, if not set, the system max).
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PKI.VerbatimCertificateSigningRequestOptions.CertificateFormat">
            <summary>
            <para>[optional]</para>
            Gets or sets the certificate format for returned data.
            Can be pem or der; defaults to pem. If der, the output is base64 encoded.
            </summary>
            <value>
            The certificate format.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.PKI.VerbatimCertificateSigningRequestOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.PKI.VerbatimCertificateSigningRequestOptions"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo">
            <summary>
            Represents the PostgreSql connection information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo.ConnectionUrl">
            <summary>
            Gets or sets the PostgreSQL connection URL or PG style string. e.g. "user=foo host=bar"
            </summary>
            <value>
            The connection string.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo.Value">
            <summary>
            <para>[optional]</para>
            Gets or sets the PostgreSQL connection URL or PG style string. e.g. "user=foo host=bar"
            Deprecated, please use <see cref="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo.ConnectionUrl"/>
            </summary>
            <value>
            The value of the data source.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo.MaximumOpenConnections">
            <summary>
            <para>[optional]</para>
            Gets or sets the maximum number of open connections to the database. 
            Defaults to 2.
            </summary>
            <value>
            The maximum open connections.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo.MaximumIdleConnections">
            <summary>
            <para>[optional]</para>
            Gets or sets the Maximum number of idle connections to the database. 
            A zero uses the value of <see cref="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo.MaximumOpenConnections"/> and a negative value disables idle connections. 
            If larger than <see cref="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo.MaximumOpenConnections"/> it will be reduced to be equal.
            </summary>
            <value>
            The maximum idle connections.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo.VerifyConnection">
            <summary>
            <para>[optional]</para>
            Gets or sets a flag which when set verifies the <see cref="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo.ConnectionUrl"/> by 
            actually connecting to the database. 
            Defaults to true.
            </summary>
            <value>
            A flag to verify the connection.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlConnectionInfo"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlRoleDefinition">
            <summary>
            Represents the PostgreSql role definition
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlRoleDefinition.Sql">
            <summary>
            <para>[required]</para>
            Gets or sets the SQL statements executed to create and configure the role. 
            Must be semi-colon separated string, a base64-encoded semicolon-separated string, 
            a serialized JSON string array, or a base64-encoded serialized JSON string array.
            The '{{name}}', '{{password}}' and '{{expiration}}' values will be substituted.
            </summary>
            <value>
            The SQL.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.PostgreSql.PostgreSqlRoleDefinition.RevocationSql">
            <summary>
            <para>[required]</para>
            Gets or sets the SQL statements to be executed to revoke a user. 
            Must be a semicolon-separated string, a base64-encoded semicolon-separated string, 
            a serialized JSON string array, or a base64-encoded serialized JSON string array. 
            The '{{name}}' value will be substituted.
            </summary>
            <value>
            The Revocation SQL.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo">
            <summary>
            Represents the RabbitMQ connection information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo.ConnectionUri">
            <summary>
            <para>[required]</para>
            Gets or sets the RabbitMQ management connection URI.
            </summary>
            <value>
            The Connection Uri
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo.Username">
            <summary>
            Gets or sets the RabbitMQ management administrator username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo.Password">
            <summary>
            Gets or sets the RabbitMQ management administrator password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo.VerifyConnection">
            <summary>
            <para>[optional]</para>
            Gets or sets a flag which when set verifies the <see cref="P:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo.ConnectionUri"/>, 
            <see cref="P:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo.Username"/> and <see cref="P:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo.Password"/> by actually connecting to the database. 
            Defaults to true.
            </summary>
            <value>
            A flag to verify the connection.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQConnectionInfo" /> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQRoleDefinition">
            <summary>
            Represents the RabbitMQ role definition
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQRoleDefinition.Tags">
            <summary>
            <para>[optional]</para>
            Gets or sets comma-separated RabbitMQ management tags.
            </summary>
            <value>
            The tags.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.RabbitMQ.RabbitMQRoleDefinition.VirtualHostPermissions">
            <summary>
            <para>[optional]</para>
            Gets or sets a map of virtual hosts to permissions.
            </summary>
            <value>
            The virtual hosts to permissions map.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SSH.SSHCredentials">
            <summary>
            Represents the SSH Credentials
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHCredentials.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHCredentials.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHCredentials.KeyType">
            <summary>
            Type of credentials
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHCredentials.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHCredentials.Username">
            <summary>
            Gets or sets the key.
            </summary>
            <value>
            The key.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicCredentials">
            <summary>
            Represents the SSH Dynamic Key type Credentials
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicCredentials.KeyType">
            <summary>
            Type of credentials
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicRoleDefinition">
            <summary>
            Represents the Dynamic SSH Key Type Role definition.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicRoleDefinition.KeyName">
            <summary>
            <para>[required]</para>
            Name of the registered key in Vault. 
            </summary>
            <value>
            The name of the key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicRoleDefinition.AdminUser">
            <summary>
            <para>[required]</para>
            Gets or sets the admin user at remote host. 
            The shared key being registered should be for this user and should have root or sudo privileges. 
            Every time a dynamic credential is generated for a client, 
            Vault uses this admin username to login to remote host and install the generated credential.
            </summary>
            <value>
            The admin user.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicRoleDefinition.KeyBits">
            <summary>
            <para>[optional]</para>
            Gets or sets length of the RSA dynamic key in bits; can be either 1024 or 2048. 
            1024 the default.
            </summary>
            <value>
            The key bits.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicRoleDefinition.InstallScript">
            <summary>
            <para>[optional]</para>
            Gets or sets the script used to install and uninstall public keys in the target machine. 
            Defaults to the built-in script.
            </summary>
            <value>
            The install script.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicRoleDefinition.KeyOptionSpecifications">
            <summary>
            <para>[optional]</para>
            Gets or sets the comma separated option specification which will be prefixed to RSA keys in the remote host's authorized_keys file. 
            N.B.: Vault does not check this string for validity.
            </summary>
            <value>
            The key option specifications.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicRoleDefinition.KeyTypeToGenerate">
            <summary>
            <para>[required]</para>
            Type of credentials generated by this role.
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicRoleDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.SSH.SSHDynamicRoleDefinition"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SSH.SSHKeyType">
            <summary>
            Represents the type of SSH key to be generated.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SSH.SSHKeyType.otp">
            <summary>
            The one time password.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.SSH.SSHKeyType.dynamic">
            <summary>
            The dynamic key.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SSH.SSHOTPCredentials">
            <summary>
            Represents the SSH OTP Key type Credentials
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHOTPCredentials.KeyType">
            <summary>
            Type of credentials
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SSH.SSHOTPRoleDefinition">
            <summary>
            Represents the OTP SSH Key Type Role definition.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHOTPRoleDefinition.KeyTypeToGenerate">
            <summary>
            <para>[required]</para>
            Type of credentials generated by this role.
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SSH.SSHOTPVerificationData">
            <summary>
            Represents the SSH OTP verification data.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHOTPVerificationData.IpAddress">
            <summary>
            Gets or sets the ip address.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHOTPVerificationData.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHOTPVerificationData.RoleName">
            <summary>
            Gets or sets the name of the role.
            </summary>
            <value>
            The name of the role.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SSH.SSHRoleData">
            <summary>
            Represents the SSH Role data
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHRoleData.Roles">
            <summary>
            Gets or sets the roles.
            </summary>
            <value>
            The roles.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.SSH.SSHRoleData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.SSH.SSHRoleData"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition">
            <summary>
            Represents the base class for a SSH Role definition.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition.RoleDefaultUser">
            <summary>
            <para>[required]</para>
            Gets or sets the default username for which a credential will be generated. 
            When a SSH credential is requested without an explicit username, this value will be used as default username.
            </summary>
            <value>
            The default user.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition.CIDRValues">
            <summary>
            <para>[optional]</para>
            Gets or sets the comma separated list of CIDR blocks for which the role is applicable for. 
            CIDR blocks can belong to more than one role. 
            Defaults to the zero address (0.0.0.0/0).
            </summary>
            <value>
            The CIDR values.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition.ExcludeCIDRValues">
            <summary>
            <para>[optional]</para>
            Gets or sets the comma-separated list of CIDR blocks. 
            IP addresses belonging to these blocks are not accepted by the role. 
            This is particularly useful when big CIDR blocks are being used by the role and certain parts need to be kept out.
            </summary>
            <value>
            The exclusion CIDR values.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition.Port">
            <summary>
            <para>[optional]</para>
            Gets or sets the port number for SSH connection. 
            The default is '22'. 
            Port number does not play any role in OTP generation. 
            For the 'otp' backend type, this is just a way to inform the client about the port number to use. 
            The port number will be returned to the client by Vault along with the OTP.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition.KeyTypeToGenerate">
            <summary>
            <para>[required]</para>
            Type of credentials generated by this role.
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition.AllowedUsers">
            <summary>
            <para>[optional]</para>
            Gets or sets the allowed users.
            If this option is not specified, a client can request credentials to log into any valid user at the remote host, including the admin user.
             If this field is set, credentials can only be created for the values in this list and the value of the <see cref="P:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition.RoleDefaultUser"/> field.
            </summary>
            <value>
            The allowed users.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Transit.CipherTextData">
            <summary>
            Represents the Cipher text data.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.CipherTextData.CipherText">
            <summary>
            Gets or sets the cipher text.
            </summary>
            <value>
            The cipher text.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Transit.PlainTextData">
            <summary>
            Represents the Plain text data.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.PlainTextData.PlainText">
            <summary>
            Gets or sets the plain text.
            </summary>
            <value>
            The plain text.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo">
            <summary>
            Represents the encryption key information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo.KeyType">
            <summary>
            Gets or sets the type of the key.
            </summary>
            <value>
            The type of the key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo.IsDeletionAllowed">
            <summary>
            Gets or sets a value indicating whether deletion of this key is allowed.
            </summary>
            <value>
            <c>true</c> if deletion allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo.MustUseKeyDerivation">
            <summary>
            Gets or sets a value indicating if key derivation MUST be used. 
            If enabled, all encrypt/decrypt requests to this named key must provide a context which is used for key derivation. 
            </summary>
            <value>
            <c>true</c> if derivation must be used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo.KeyVersionCreationTimes">
            <summary>
            Gets or sets the key version creation times.
            Shows the creation time of each key version; the values are not the keys themselves. 
            </summary>
            <value>
            The key version creation times.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo.MinimumDecryptionVersion">
            <summary>
            Gets or sets the minimum version of ciphertext allowed to be decrypted. 
            Adjusting this as part of a key rotation policy can prevent old copies of ciphertext from being decrypted, 
            should they fall into the wrong hands. 
            </summary>
            <value>
            The minimum decryption version.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo.Name">
            <summary>
            Gets or sets the name of the encryption key.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo.ConvergentEncryption">
            <summary>
            Gets or sets a value indicating whether [convergent encryption].
            </summary>
            <value>
              <c>true</c> if [convergent encryption]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo.ConvergentEncryptionVersion">
            <summary>
            Gets or sets the convergent encryption version.
            </summary>
            <value>
            The convergent encryption version.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo.KeyDerivationFunction">
            <summary>
            Gets or sets the key derivation function.
            </summary>
            <value>
            The key derivation function.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitEncryptionKeyInfo.LatestVersion">
            <summary>
            Gets or sets the latest version.
            </summary>
            <value>
            The latest version.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Transit.TransitKeyData">
            <summary>
            Represents the transit key data.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitKeyData.PlainTextKey">
            <summary>
            Gets or sets the plain text key.
            </summary>
            <value>
            The plain text key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.Secret.Models.Transit.TransitKeyData.CipherTextKey">
            <summary>
            Gets or sets the cipher text key.
            </summary>
            <value>
            The cipher text key.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.Secret.Models.Transit.TransitKeyType">
            <summary>
            Represents the type of Transit key to be generated.
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.Transit.TransitKeyType.aes256_gcm96">
            <summary>
            AES-256 wrapped with GCM using a 12-byte nonce size (symmetric)
            </summary>
        </member>
        <member name="F:VaultSharp.Backends.Secret.Models.Transit.TransitKeyType.ecdsa_p256">
            <summary>
            ECDSA using the P-256 elliptic curve (asymmetric)
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.AuthorizationInfo">
            <summary>
            Represents the authorization information in Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.AuthorizationInfo.ClientTokenAccessor">
            <summary>
            Gets or sets the client token accessor.
            </summary>
            <value>
            The client token accessor.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.AuthorizationInfo.ClientToken">
            <summary>
            Gets or sets the client token.
            </summary>
            <value>
            The client token.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.AuthorizationInfo.Policies">
            <summary>
            Gets or sets the policies.
            </summary>
            <value>
            The policies.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.AuthorizationInfo.Metadata">
            <summary>
            Gets or sets any metadata associated with this authorization info.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.AuthorizationInfo.LeaseDurationSeconds">
            <summary>
            Gets or sets the lease duration seconds.
            </summary>
            <value>
            The lease duration seconds.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.AuthorizationInfo.Renewable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.Backends.System.Models.AuthorizationInfo"/> is renewable.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.EncryptionKeyStatus">
            <summary>
            Represents information about the encryption key used by Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.EncryptionKeyStatus.SequentialKeyNumber">
            <summary>
            Gets or sets the sequential key number.
            </summary>
            <value>
            The sequential key number.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.EncryptionKeyStatus.InstallTime">
            <summary>
            Gets or sets the install time for the key.
            </summary>
            <value>
            The install time.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.HealthStatus">
            <summary>
            Represents the health status of a Vault instance.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.HealthStatus.HealthCheckSucceeded">
            <summary>
            Gets or sets a value indicating whether [health check succeeded].
            </summary>
            <value>
            <c>true</c> if [health check succeeded]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.HealthStatus.ClusterId">
            <summary>
            Gets or sets the cluster identifier.
            </summary>
            <value>
            The cluster identifier.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.HealthStatus.ClusterName">
            <summary>
            Gets or sets the name of the cluster.
            </summary>
            <value>
            The name of the cluster.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.HealthStatus.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.HealthStatus.ServerTimeUtcUnixTimestamp">
            <summary>
            Gets or sets the server time UTC unix timestamp.
            </summary>
            <value>
            The server time UTC unix timestamp.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.HealthStatus.ServerTimeUtc">
            <summary>
            Gets the friendly server time from ServerTimeUtcUnixTimestamp 
            which is in seconds since January 1, 1970 12:00:00 a.m. UTC.
            </summary>
            <value>
            The server time in UTC. (zero offset)
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.HealthStatus.Standby">
            <summary>
            Gets or sets a value indicating whether this instance of Vault is a standby.
            </summary>
            <value>
              <c>true</c> if standby; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.HealthStatus.Sealed">
            <summary>
            Gets or sets a value indicating whether this instance of Vault is sealed.
            </summary>
            <value>
              <c>true</c> if sealed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.HealthStatus.Initialized">
            <summary>
            Gets or sets a value indicating whether this instance of Vault is initialized.
            </summary>
            <value>
              <c>true</c> if initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.HealthStatus.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.InitializeOptions">
            <summary>
            Represents the initialization options for Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.InitializeOptions.RootTokenPgpKey">
            <summary>
            <para>[optional]</para>
            Gets or sets a PGP public key used to encrypt the initial root token. 
            The key must be base64-encoded from its original binary representation.
            </summary>
            <value>
            The root token pgp key.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.InitializeOptions.SecretShares">
            <summary>
            <para>[required]</para>
            Gets or sets the number of shares to split the master key into..
            </summary>
            <value>
            The secret shares.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.InitializeOptions.SecretThreshold">
            <summary>
            <para>[required]</para>
            Gets or sets the secret threshold.
            The number of shares required to reconstruct the master key. 
            This must be less than or equal to <see cref="P:VaultSharp.Backends.System.Models.InitializeOptions.SecretShares"/>. 
            If using Vault HSM with auto-unsealing, this value must be the same as <see cref="P:VaultSharp.Backends.System.Models.InitializeOptions.SecretShares"/>.
            </summary>
            <value>
            The secret threshold.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.InitializeOptions.PgpKeys">
            <summary>
            <para>[required]</para>
            Gets or sets the PGP keys.
            An array of PGP public keys used to encrypt the output unseal keys. 
            Ordering is preserved. The keys must be base64-encoded from their original binary representation. 
            The size of this array must be the same as <see cref="P:VaultSharp.Backends.System.Models.InitializeOptions.SecretShares"/>.
            </summary>
            <value>
            The PGP keys.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.InitializeOptions.StoredShares">
            <summary>
            <para>[required]</para>
            Gets or sets the stored shares.
            The number of shares that should be encrypted by the HSM and stored for auto-unsealing (Vault HSM only). 
            Currently must be the same as <see cref="P:VaultSharp.Backends.System.Models.InitializeOptions.SecretShares"/>.
            </summary>
            <value>
            The stored shares.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.InitializeOptions.RecoveryShares">
            <summary>
            <para>[required]</para>
            Gets or sets the recovery shares.
            The number of shares to split the recovery key into (Vault HSM only).
            </summary>
            <value>
            The recovery shares.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.InitializeOptions.RecoveryThreshold">
            <summary>
            <para>[required]</para>
            Gets or sets the recovery threshold.
            The number of shares required to reconstruct the recovery key (Vault HSM only). 
            This must be less than or equal to <see cref="P:VaultSharp.Backends.System.Models.InitializeOptions.RecoveryShares"/>.
            </summary>
            <value>
            The recovery threshold.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.InitializeOptions.RecoveryPgpKeys">
            <summary>
            <para>[optional]</para>
            Gets or sets the recovery PGP keys.
            An array of PGP public keys used to encrypt the output recovery keys (Vault HSM only). 
            Ordering is preserved. The keys must be base64-encoded from their original binary representation. 
            The size of this array must be the same as <see cref="P:VaultSharp.Backends.System.Models.InitializeOptions.RecoveryShares"/>.
            </summary>
            <value>
            The recovery PGP keys.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.Leader">
            <summary>
            Represents information about high availability status and current leader instance of Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Leader.HighAvailabilityEnabled">
            <summary>
            Gets or sets a value indicating whether [high availability enabled].
            </summary>
            <value>
            <c>true</c> if [high availability enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Leader.IsSelf">
            <summary>
            Gets or sets a value indicating whether this instance is the leader.
            </summary>
            <value>
              <c>true</c> if this instance is the leader; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Leader.Address">
            <summary>
            Gets or sets the address of the leader.
            e.g. https://127.0.0.1:8200/
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.MasterCredentials">
            <summary>
            Represents the root credentials (master keys and root token) for Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.MasterCredentials.MasterKeys">
            <summary>
            Gets or sets the master keys (possibly encrypted with PGP Keys, if provided during Vault initialization)
            </summary>
            <value>
            The master keys.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.MasterCredentials.Base64MasterKeys">
            <summary>
            Gets or sets the new base 64 master keys. (possibly pgp encrypted)
            </summary>
            <value>
            The master keys.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.MasterCredentials.RootToken">
            <summary>
            Gets or sets the root token which has superhero permissions on Vault.
            </summary>
            <value>
            The root token.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.MountConfiguration">
            <summary>
            Represents the configuration values for a mounted backend.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.MountConfiguration.DefaultLeaseTtl">
            <summary>
            Gets or sets the default lease TTL.
            A value of "0" or "system" means that the system defaults are used by this backend.
            </summary>
            <value>
            The default lease TTL.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.MountConfiguration.MaximumLeaseTtl">
            <summary>
            Gets or sets the maximum lease TTL.
            A value of "0" or "system" means that the system defaults are used by this backend.
            </summary>
            <value>
            The maximum lease TTL.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.MountConfiguration.DefaultLeaseTtlValue">
            <summary>
            Gets the default lease TTL value.
            </summary>
            <value>
            The default lease TTL value.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.MountConfiguration.MaximumLeaseTtlValue">
            <summary>
            Gets the maximum lease TTL value.
            </summary>
            <value>
            The maximum lease TTL value.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.Policy">
            <summary>
            Represents a Vault Policy entity.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Policy.Name">
            <summary>
            Gets or sets the name of the policy.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Policy.Rules">
            <summary>
            Gets or sets the rules for the policy.
            <para>
            These rules are in a raw, HCL (Hashicorp Configuration Language) or JSON format.
            So write to them as a single raw string value from an HCL or JSON packet.
            And read them as a single raw string value and then parse them for HCL or JSON.
            </para>
            </summary>
            <value>
            The rules.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.RawData">
            <summary>
            Represents the raw secret data.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RawData.RawValues">
            <summary>
            Gets or sets the raw values.
            </summary>
            <value>
            The raw values.
            </value>
        </member>
        <member name="M:VaultSharp.Backends.System.Models.RawData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VaultSharp.Backends.System.Models.RawData"/> class.
            </summary>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.RekeyBackupInfo">
            <summary>
            Represents the Rekey backup information.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyBackupInfo.Nonce">
            <summary>
            Gets or sets the nonce for the current rekey operation..
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyBackupInfo.PGPFingerprintToEncryptedKeyMap">
            <summary>
            Gets or sets the map of PGP key fingerprint to hex-encoded PGP-encrypted key.
            </summary>
            <value>
            The map of PGP key fingerprint to hex-encoded PGP-encrypted key.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.RekeyProgress">
            <summary>
            Represents the rekey progress.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyProgress.Complete">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.Backends.System.Models.RekeyProgress"/> is complete.
            </summary>
            <value>
              <c>true</c> if complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyProgress.MasterKeys">
            <summary>
            Gets or sets the new master keys. (possibly pgp encrypted)
            </summary>
            <value>
            The master keys.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyProgress.Base64MasterKeys">
            <summary>
            Gets or sets the new base 64 master keys. (possibly pgp encrypted)
            </summary>
            <value>
            The master keys.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyProgress.Nonce">
            <summary>
            Gets or sets the nonce for the current rekey operation..
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyProgress.PGPFingerPrints">
            <summary>
            Gets or sets the PGP finger prints if PGP keys are being used to encrypt the final shares.
            </summary>
            <value>
            The PGP finger prints.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyProgress.Backup">
            <summary>
            Gets or sets a value indicating whether the final keys will be backed up to physical storage.
            </summary>
            <value>
              <c>true</c> if backup; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.RekeyStatus">
            <summary>
            Represents the configuration and progress of the current rekey attempt.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyStatus.Started">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.Backends.System.Models.RekeyStatus"/> is started.
            </summary>
            <value>
              <c>true</c> if started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyStatus.Nonce">
            <summary>
            Gets or sets the nonce for the current rekey operation..
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyStatus.SecretThreshold">
            <summary>
            Gets or sets the number of shares required to reconstruct the master key.
            </summary>
            <value>
            The secret threshold.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyStatus.SecretShares">
            <summary>
            Gets or sets the number of shares to split the master key into.
            </summary>
            <value>
            The secret shares.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyStatus.UnsealKeysProvided">
            <summary>
            Gets or sets the number of unseal keys provided for this rekey.
            </summary>
            <value>
            The progress.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyStatus.RequiredUnsealKeys">
            <summary>
            Gets or sets the required number of unseal keys required to complete the rekeying process.
            </summary>
            <value>
            The required unseal keys.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyStatus.PGPFingerPrints">
            <summary>
            Gets or sets the PGP finger prints if PGP keys are being used to encrypt the final shares.
            </summary>
            <value>
            The PGP finger prints.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RekeyStatus.Backup">
            <summary>
            Gets or sets a value indicating whether the final keys will be backed up to physical storage.
            </summary>
            <value>
              <c>true</c> if backup; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.RootTokenGenerationStatus">
            <summary>
            Represents the configuration and progress of the root token generation attempt.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RootTokenGenerationStatus.Started">
            <summary>
            Gets or sets a value indicating this <see cref="T:VaultSharp.Backends.System.Models.RootTokenGenerationStatus"/>.
            </summary>
            <value>
              <c>true</c> if started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RootTokenGenerationStatus.Nonce">
            <summary>
            Gets or sets the nonce for the current root token generation.
            </summary>
            <value>
            The nonce.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RootTokenGenerationStatus.UnsealKeysProvided">
            <summary>
            Gets or sets the number of unseal keys provided for this root token generation.
            </summary>
            <value>
            The progress.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RootTokenGenerationStatus.RequiredUnsealKeys">
            <summary>
            Gets or sets the required number of unseal keys required to 
            complete the root token generation.
            </summary>
            <value>
            The required unseal keys.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RootTokenGenerationStatus.EncodedRootToken">
            <summary>
            Gets or sets the encoded root token if the attempt is complete.
            </summary>
            <value>
            The encoded root token.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RootTokenGenerationStatus.PGPFingerPrint">
            <summary>
            Gets or sets the PGP finger print if 
            a PGP key is being used to encrypt the final root token.
            </summary>
            <value>
            The PGP finger prints.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.RootTokenGenerationStatus.Complete">
            <summary>
            Gets or sets a value indicating whether 
            this root token generation is complete.
            </summary>
            <value>
              <c>true</c> if complete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.SealStatus">
            <summary>
            Represents the Seal status of the Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.SealStatus.Sealed">
            <summary>
            Gets or sets a value indicating about the <see cref="T:VaultSharp.Backends.System.Models.SealStatus"/>.
            </summary>
            <value>
              <c>true</c> if sealed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.SealStatus.SecretThreshold">
            <summary>
            Gets or sets the number of shares required to reconstruct the master key.
            </summary>
            <value>
            The secret threshold.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.SealStatus.SecretShares">
            <summary>
            Gets or sets the number of shares to split the master key into.
            </summary>
            <value>
            The secret shares.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.SealStatus.Progress">
            <summary>
            Gets or sets the number of shares that have been successfully applied to reconstruct the master key.
            When the value is about to reach <see cref="P:VaultSharp.Backends.System.Models.SealStatus.SecretThreshold"/>, the Vault will be unsealed and the value will become <value>0</value>.
            </summary>
            <value>
            The progress count.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.SealStatus.Version">
            <summary>
            Gets or sets the vault version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.SealStatus.ClusterName">
            <summary>
            Gets or sets the name of the cluster.
            </summary>
            <value>
            The name of the cluster.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.SealStatus.ClusterId">
            <summary>
            Gets or sets the cluster identifier.
            </summary>
            <value>
            The cluster identifier.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.Secret`1">
            <summary>
            Represents a Vault Secret with lease information and generic data.
            </summary>
            <typeparam name="TData">The type of the data contained in the secret.</typeparam>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Secret`1.RequestId">
            <summary>
            Gets or sets the request identifier.
            </summary>
            <value>
            The request identifier.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Secret`1.LeaseId">
            <summary>
            Gets or sets the lease identifier.
            </summary>
            <value>
            The lease identifier.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Secret`1.Renewable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:VaultSharp.Backends.System.Models.Secret`1"/> is renewable.
            </summary>
            <value>
              <c>true</c> if renewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Secret`1.LeaseDurationSeconds">
            <summary>
            Gets or sets the lease duration seconds.
            </summary>
            <value>
            The lease duration seconds.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Secret`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Secret`1.WrappedInformation">
            <summary>
            Gets or sets the wrapped information.
            </summary>
            <value>
            The wrapped information.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Secret`1.Warnings">
            <summary>
            Gets or sets the warnings.
            </summary>
            <value>
            The warnings.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.Secret`1.AuthorizationInfo">
            <summary>
            Gets or sets the authorization information.
            </summary>
            <value>
            The authorization information.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.TokenWrapInfo">
            <summary>
            Represents the token wrapped information in Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.TokenWrapInfo.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.TokenWrapInfo.CreationTimeToLive">
            <summary>
            Gets or sets the creation time to live.
            </summary>
            <value>
            The creation time to live.
            </value>
        </member>
        <member name="T:VaultSharp.Backends.System.Models.WrapInfo">
            <summary>
            Represents the wrapped information in Vault.
            </summary>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.WrapInfo.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>
            The token.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.WrapInfo.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.WrapInfo.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:VaultSharp.Backends.System.Models.WrapInfo.WrappedAccessor">
            <summary>
            Gets or sets the wrapped accessor.
            </summary>
            <value>
            The wrapped accessor.
            </value>
        </member>
        <member name="T:VaultSharp.Infrastructure.JsonConverters.AuditBackendJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.Backends.Audit.Models.AuditBackend" /> object from JSON.
            </summary>
        </member>
        <member name="P:VaultSharp.Infrastructure.JsonConverters.AuditBackendJsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.AuditBackendJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:System.NotImplementedException">Unnecessary because CanWrite is false. The type will skip the converter.</exception>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.AuditBackendJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.AuditBackendJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.Infrastructure.JsonConverters.AuditBackendTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.Backends.Audit.Models.AuditBackendType" /> object to and from JSON.
            </summary>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.AuditBackendTypeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.AuditBackendTypeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.AuditBackendTypeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.Infrastructure.JsonConverters.AuthenticationBackendTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.Backends.Authentication.Models.AuthenticationBackendType" /> object to and from JSON.
            </summary>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.AuthenticationBackendTypeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.AuthenticationBackendTypeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.AuthenticationBackendTypeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.Infrastructure.JsonConverters.RawDataJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.Backends.System.Models.RawData" /> object to and from JSON.
            </summary>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.RawDataJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.RawDataJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.RawDataJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.Infrastructure.JsonConverters.SecretBackendTypeJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.Backends.Secret.Models.SecretBackendType" /> object to and from JSON.
            </summary>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.SecretBackendTypeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.SecretBackendTypeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.SecretBackendTypeJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.Infrastructure.JsonConverters.SSHCredentialsJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.Backends.Secret.Models.SSH.SSHCredentials" /> object from JSON.
            </summary>
        </member>
        <member name="P:VaultSharp.Infrastructure.JsonConverters.SSHCredentialsJsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.SSHCredentialsJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:System.NotImplementedException">Unnecessary because CanWrite is false. The type will skip the converter.</exception>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.SSHCredentialsJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.SSHCredentialsJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:VaultSharp.Infrastructure.JsonConverters.SSHRoleDefinitionJsonConverter">
            <summary>
            Converts the <see cref="T:VaultSharp.Backends.Secret.Models.SSH.SSHRoleDefinition" /> object from JSON.
            </summary>
        </member>
        <member name="P:VaultSharp.Infrastructure.JsonConverters.SSHRoleDefinitionJsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.SSHRoleDefinitionJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
            <exception cref="T:System.NotImplementedException">Unnecessary because CanWrite is false. The type will skip the converter.</exception>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.SSHRoleDefinitionJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:VaultSharp.Infrastructure.JsonConverters.SSHRoleDefinitionJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
    </members>
</doc>
